"use strict";import H from"../Core/Globals.js";const win=H["win"];import T from"../Core/Templating.js";const format=T["format"];import U from"../Core/Utilities.js";const{error,extend,merge,pushUnique,wrap}=U;var GeoJSONComposition;!function(t){const e=[];function r(t){return this.mapView&&this.mapView.lonLatToProjectedUnits(t)}function n(t){return this.mapView&&this.mapView.projectedUnitsToLonLat(t)}function i(t,o){const e=this.options.chart.proj4||win.proj4;var r,n,i,s,a,p,c,l,m,h;{if(e)return{jsonmarginX:r=0,jsonmarginY:n=0,jsonres:i=1,scale:s=1,xoffset:a=0,xpan:p=0,yoffset:c=0,ypan:l=0}=o,t=e(o.crs,[t.lon,t.lat]),m=o.cosAngle||o.rotation&&Math.cos(o.rotation),h=o.sinAngle||o.rotation&&Math.sin(o.rotation),{x:(((o=o.rotation?[t[0]*m+t[1]*h,-t[0]*h+t[1]*m]:t)[0]-a)*s+p)*i+r,y:-(((c-o[1])*s+l)*i-n)};error(21,!1,this)}}function s(t,o){const e=this.options.chart.proj4||win.proj4;var r,n,i,s,a,p,c,l;if(e){if(null!==t.y)return{jsonmarginX:p=0,jsonmarginY:r=0,jsonres:n=1,scale:i=1,xoffset:l=0,xpan:c=0,yoffset:s=0,ypan:a=0}=o,p={x:((t.x-p)/n-c)/i+l,y:((t.y-r)/n+a)/i+s},c=o.cosAngle||o.rotation&&Math.cos(o.rotation),l=o.sinAngle||o.rotation&&Math.sin(o.rotation),{lat:(t=e(o.crs,"WGS84",o.rotation?{x:p.x*c+p.y*-l,y:p.x*l+p.y*c}:p)).y,lon:t.x}}else error(21,!1,this)}function c(t,o){o=o||Object.keys(t.objects)[0];const e=t.objects[o];if(e["hc-decoded-geojson"])return e["hc-decoded-geojson"];let i=t.arcs;if(t.transform){var s=t.arcs,{scale:a,translate:p}=t.transform;let e,r,n;i=[];for(let t=0,o=s.length;t<o;++t){var c=s[t];i.push(e=[]),r=0;for(let t=n=0,o=c.length;t<o;++t)e.push([(r+=c[t][0])*a[0]+p[0],(n+=c[t][1])*a[1]+p[1]])}}const r=t=>"number"==typeof t[0]?t.reduce((t,o,e)=>{let r=o<0?i[~o]:i[o];return o<0?(r=r.slice(0,0===e?r.length:r.length-1)).reverse():e&&(r=r.slice(1)),t.concat(r)},[]):t.map(r),n=e.geometries,l=[];for(let t=0,o=n.length;t<o;++t)l.push({type:"Feature",properties:n[t].properties,geometry:{type:n[t].type,coordinates:n[t].coordinates||r(n[t].arcs)}});o={type:"FeatureCollection",copyright:t.copyright,copyrightShort:t.copyrightShort,copyrightUrl:t.copyrightUrl,features:l,"hc-recommended-mapview":e["hc-recommended-mapview"],bbox:t.bbox,title:t.title};return e["hc-decoded-geojson"]=o}function a(t,o){o=merge(!0,this.options.credits,o),this.mapCredits&&(o.href=void 0),t.call(this,o),this.credits&&this.mapCreditsFull&&this.credits.attr({title:this.mapCreditsFull})}t.compose=function(t){if(pushUnique(e,t)){const o=t.prototype;o.fromLatLonToPoint=r,o.fromPointToLatLon=n,o.transformFromLatLon=i,o.transformToLatLon=s,wrap(o,"addCredits",a)}},t.geojson=function(t,e="map",o){const r=[];var n=(t="Topology"===t.type?c(t):t).features;for(let o=0,t=n.length;o<t;++o){var i,s=n[o],a=s.geometry||{},p=a.type,a=a.coordinates,s=s.properties;let t;("map"!==e&&"mapbubble"!==e||"Polygon"!==p&&"MultiPolygon"!==p)&&("mapline"!==e||"LineString"!==p&&"MultiLineString"!==p)?"mappoint"===e&&"Point"===p&&a.length&&(t={geometry:{coordinates:a,type:p}}):a.length&&(t={geometry:{coordinates:a,type:p}}),t&&(a=s&&(s.name||s.NAME),p=s&&s.lon,i=s&&s.lat,r.push(extend(t,{lat:"number"==typeof i?i:void 0,lon:"number"==typeof p?p:void 0,name:"string"==typeof a?a:void 0,properties:s})))}return o&&t.copyrightShort&&(o.chart.mapCredits=format(o.chart.options.credits?.mapText,{geojson:t}),o.chart.mapCreditsFull=format(o.chart.options.credits?.mapTextFull,{geojson:t})),r},t.topo2geo=c}(GeoJSONComposition=GeoJSONComposition||{});export default GeoJSONComposition;
"use strict";import H from"../parts/Globals.js";import U from"../parts/Utilities.js";var isArray=U.isArray,merge=U.merge,seriesType=U.seriesType;import reduceArrayMixin from"../mixins/reduce-array.js";import multipleLinesMixin from"../mixins/multipe-lines.js";var SMA=H.seriesTypes.sma,getArrayExtremes=reduceArrayMixin.getArrayExtremes;seriesType("stochastic","sma",{params:{periods:[14,3]},marker:{enabled:!1},tooltip:{pointFormat:'<span style="color:{point.color}">‚óè</span><b> {series.name}</b><br/>%K: {point.y}<br/>%D: {point.smoothed}<br/>'},smoothedLine:{styles:{lineWidth:1,lineColor:void 0}},dataGrouping:{approximation:"averages"}},merge(multipleLinesMixin,{nameComponents:["periods"],nameBase:"Stochastic",pointArrayMap:["y","smoothed"],parallelArrays:["x","y","smoothed"],pointValKey:"y",linesApiNames:["smoothedLine"],init:function(){SMA.prototype.init.apply(this,arguments),this.options=merge({smoothedLine:{styles:{lineColor:this.color}}},this.options)},getValues:function(e,i){var r,s,t,o,a,n=i.periods[0],p=i.periods[1],l=e.xData,m=e.yData,y=m?m.length:0,h=[],u=[],d=[],c=null;if(!(y<n)&&isArray(m[0])&&4===m[0].length){for(a=n-1;a<y;a++)r=m.slice(a-n+1,a+1),s=(o=getArrayExtremes(r,2,1))[0],t=(m[a][3]-s)/(o[1]-s)*100,u.push(l[a]),d.push([t,null]),a>=n-1+(p-1)&&(c=SMA.prototype.getValues.call(this,{xData:u.slice(-p),yData:d.slice(-p)},{period:p}).yData[0]),h.push([l[a],t,c]),d[d.length-1][1]=c;return{values:h,xData:u,yData:d}}}}));
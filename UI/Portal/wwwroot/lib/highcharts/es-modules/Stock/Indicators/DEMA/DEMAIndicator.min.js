"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const EMAIndicator=SeriesRegistry.seriesTypes["ema"];import U from"../../../Core/Utilities.js";const{correctFloat,isArray,merge}=U;class DEMAIndicator extends EMAIndicator{constructor(){super(...arguments),this.EMApercent=void 0,this.data=void 0,this.options=void 0,this.points=void 0}getEMA(e,t,r,i,s,o){return super.calculateEma(o||[],e,void 0===s?1:s,this.EMApercent,t,void 0===i?-1:i,r)}getValues(e,t){const r=t.period,i=[],s=2*r,o=e.xData,a=e.yData,c=a?a.length:0,n=[],d=[],p=[];let u=0,A=0,l,E,h,M,g=-1,m,y=0;if(this.EMApercent=2/(r+1),!(c<2*r-1)){for(isArray(a[0])&&(g=t.index||0),u=super.accumulatePeriodPoints(r,g,a),y=u/r,u=0,M=r;M<c+2;M++)M<c+1&&(A=this.getEMA(a,E,y,g,M)[1],i.push(A)),E=A,M<s?u+=A:(M===s&&(y=u/r),A=i[M-r-1],l=this.getEMA([A],h,y)[1],m=[o[M-2],correctFloat(2*A-l)],n.push(m),d.push(m[0]),p.push(m[1]),h=l);return{values:n,xData:d,yData:p}}}}DEMAIndicator.defaultOptions=merge(EMAIndicator.defaultOptions),SeriesRegistry.registerSeriesType("dema",DEMAIndicator);export default DEMAIndicator;
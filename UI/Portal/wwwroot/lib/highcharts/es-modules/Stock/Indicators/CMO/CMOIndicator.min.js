"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const SMAIndicator=SeriesRegistry.seriesTypes["sma"];import U from"../../../Core/Utilities.js";const{isNumber,merge}=U;class CMOIndicator extends SMAIndicator{constructor(){super(...arguments),this.data=void 0,this.options=void 0,this.points=void 0}getValues(e,t){const r=t.period,o=e.xData,a=e.yData,n=a?a.length:0,p=[],d=[],u=[];let c,h=t.index,l;if(!(o.length<r)){l=isNumber(a[0])?a:(h=Math.min(h,a[0].length-1),a.map(e=>e[h]));let e,t=0,s=0,i;for(let e=r;0<e;e--)l[e]>l[e-1]?t+=l[e]-l[e-1]:l[e]<l[e-1]&&(s+=l[e-1]-l[e]);for(i=0<t+s?100*(t-s)/(t+s):0,d.push(o[r]),u.push(i),p.push([o[r],i]),c=r+1;c<n;c++)e=Math.abs(l[c-r-1]-l[c-r]),l[c]>l[c-1]?t+=l[c]-l[c-1]:l[c]<l[c-1]&&(s+=l[c-1]-l[c]),l[c-r]>l[c-r-1]?t-=e:s-=e,i=0<t+s?100*(t-s)/(t+s):0,d.push(o[c]),u.push(i),p.push([o[c],i]);return{values:p,xData:d,yData:u}}}}CMOIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{period:20,index:3}}),SeriesRegistry.registerSeriesType("cmo",CMOIndicator);export default CMOIndicator;
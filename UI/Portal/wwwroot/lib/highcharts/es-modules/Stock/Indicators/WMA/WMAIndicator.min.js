"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const SMAIndicator=SeriesRegistry.seriesTypes["sma"];import U from"../../../Core/Utilities.js";const{isArray,merge}=U;function accumulateAverage(e,r,t,i,a){r=r[i],t=a<0?t[i]:t[i][a];e.push([r,t])}function weightedSumArray(e,r){r*=(r+1)/2;return e.reduce(function(e,r,t){return[null,e[1]+r[1]*(t+1)]})[1]/r}function populateAverage(e,r,t,i){var a=weightedSumArray(e,e.length),r=r[i-1];return e.shift(),[r,a]}class WMAIndicator extends SMAIndicator{constructor(){super(...arguments),this.data=void 0,this.options=void 0,this.points=void 0}getValues(e,r){const t=r.period,i=e.xData,a=e.yData,s=a?a.length:0,o=i[0],u=[],n=[],p=[];let c=1,d=-1,g,l,A=a[0];if(!(i.length<t)){isArray(a[0])&&(d=r.index,A=a[0][d]);for(var h=[[o,A]];c!==t;)accumulateAverage(h,i,a,c,d),c++;for(g=c;g<s;g++)l=populateAverage(h,i,a,g),u.push(l),n.push(l[0]),p.push(l[1]),accumulateAverage(h,i,a,g,d);return l=populateAverage(h,i,a,g),u.push(l),n.push(l[0]),p.push(l[1]),{values:u,xData:n,yData:p}}}}WMAIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{index:3,period:9}}),SeriesRegistry.registerSeriesType("wma",WMAIndicator);export default WMAIndicator;
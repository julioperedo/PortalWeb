"use strict";import MultipleLinesComposition from"../MultipleLinesComposition.js";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const SMAIndicator=SeriesRegistry.seriesTypes["sma"];import U from"../../../Core/Utilities.js";const{extend,isArray,merge}=U;function getStandardDeviation(t,e,i,o){var s=t.length;let r=0,a,n=0;for(;r<s;r++)a=(i?t[r][e]:t[r])-o,n+=a*a;return n/=s-1,Math.sqrt(n)}class BBIndicator extends SMAIndicator{constructor(){super(...arguments),this.data=void 0,this.options=void 0,this.points=void 0}init(){SeriesRegistry.seriesTypes.sma.prototype.init.apply(this,arguments),this.options=merge({topLine:{styles:{lineColor:this.color}},bottomLine:{styles:{lineColor:this.color}}},this.options)}getValues(t,e){const i=e.period,o=e.standardDeviation,s=[],r=[],a=t.xData,n=t.yData,p=n?n.length:0,l=[];let d,m,y,c,g,u,h,b,v;if(!(a.length<i)){var B=isArray(n[0]);for(v=i;v<=p;v++)g=a.slice(v-i,v),u=n.slice(v-i,v),c=(b=SeriesRegistry.seriesTypes.sma.prototype.getValues.call(this,{xData:g,yData:u},e)).xData[0],m=(d=b.yData[0])+o*(h=getStandardDeviation(u,e.index,B,d)),y=d-o*h,l.push([c,m,d,y]),s.push(c),r.push([m,d,y]);return{values:l,xData:s,yData:r}}}}BBIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{period:20,standardDeviation:2,index:3},bottomLine:{styles:{lineWidth:1,lineColor:void 0}},topLine:{styles:{lineWidth:1,lineColor:void 0}},tooltip:{pointFormat:'<span style="color:{point.color}">‚óè</span><b> {series.name}</b><br/>Top: {point.top}<br/>Middle: {point.middle}<br/>Bottom: {point.bottom}<br/>'},marker:{enabled:!1},dataGrouping:{approximation:"averages"}}),extend(BBIndicator.prototype,{areaLinesNames:["top","bottom"],linesApiNames:["topLine","bottomLine"],nameComponents:["period","standardDeviation"],pointArrayMap:["top","middle","bottom"],pointValKey:"middle"}),MultipleLinesComposition.compose(BBIndicator),SeriesRegistry.registerSeriesType("bb",BBIndicator);export default BBIndicator;
"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const SMAIndicator=SeriesRegistry.seriesTypes["sma"];import U from"../../../Core/Utilities.js";const{isArray,merge}=U;function accumulateAverage(e,t,r,s){t=t[s],r=r[s];e.push([t,r])}function getTR(e,t){var r=e[1]-e[2],s=void 0===t?0:Math.abs(e[1]-t[3]),e=void 0===t?0:Math.abs(e[2]-t[3]);return Math.max(r,s,e)}function populateAverage(e,t,r,s,a,i){return[t[s-1],(i*(a-1)+getTR(r[s-1],r[s-2]))/a]}class ATRIndicator extends SMAIndicator{constructor(){super(...arguments),this.data=void 0,this.points=void 0,this.options=void 0}getValues(e,t){const r=t.period,s=e.xData,a=e.yData,i=a?a.length:0,o=s[0],n=a[0],u=[[o,n]],p=[],c=[],d=[];let g,h,l=0,A=1,v=0;if(!(s.length<=r)&&isArray(a[0])&&4===a[0].length){for(h=1;h<=i;h++)accumulateAverage(u,s,a,h),r<A?(g=populateAverage(u,s,a,h,r,l),l=g[1],p.push(g),c.push(g[0]),d.push(g[1])):(r===A?(l=v/(h-1),p.push([s[h-1],l]),c.push(s[h-1]),d.push(l)):v+=getTR(a[h-1],a[h-2]),A++);return{values:p,xData:c,yData:d}}}}ATRIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{index:void 0}}),SeriesRegistry.registerSeriesType("atr",ATRIndicator);export default ATRIndicator;
"use strict";import MultipleLinesComposition from"../MultipleLinesComposition.js";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const SMAIndicator=SeriesRegistry.seriesTypes["sma"];import U from"../../../Core/Utilities.js";const{correctFloat,extend,merge}=U;function getBaseForBand(t,e,i){return correctFloat(e-t)/(correctFloat(e+t)/2)*1e3*i}function getPointUB(t,e){return t*correctFloat(1+2*e)}function getPointLB(t,e){return t*correctFloat(1-2*e)}class ABandsIndicator extends SMAIndicator{constructor(){super(...arguments),this.data=void 0,this.options=void 0,this.points=void 0}getValues(t,e){const i=e.period,o=e.factor,a=e.index,s=t.xData,r=t.yData,n=r?r.length:0,p=[],d=[],l=[],c=[],u=[];let m,g,y,B,h,f,x,D,A,L,I;if(!(n<i)){for(I=0;I<=n;I++)I<n&&(h=getBaseForBand(r[I][2],r[I][1],o),p.push(getPointUB(r[I][1],h)),d.push(getPointLB(r[I][2],h))),I>=i&&(A=s.slice(I-i,I),L=r.slice(I-i,I),x=super.getValues.call(this,{xData:A,yData:p.slice(I-i,I)},{period:i}),D=super.getValues.call(this,{xData:A,yData:d.slice(I-i,I)},{period:i}),B=(f=super.getValues.call(this,{xData:A,yData:L},{period:i,index:a})).xData[0],g=x.yData[0],y=D.yData[0],m=f.yData[0],l.push([B,g,m,y]),c.push(B),u.push([g,m,y]));return{values:l,xData:c,yData:u}}}}ABandsIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{period:20,factor:.001,index:3},lineWidth:1,topLine:{styles:{lineWidth:1}},bottomLine:{styles:{lineWidth:1}},dataGrouping:{approximation:"averages"}}),extend(ABandsIndicator.prototype,{areaLinesNames:["top","bottom"],linesApiNames:["topLine","bottomLine"],nameBase:"Acceleration Bands",nameComponents:["period","factor"],pointArrayMap:["top","middle","bottom"],pointValKey:"middle"}),MultipleLinesComposition.compose(ABandsIndicator),SeriesRegistry.registerSeriesType("abands",ABandsIndicator);export default ABandsIndicator;
"use strict";import AU from"../ArrayUtilities.js";import MultipleLinesComposition from"../MultipleLinesComposition.js";import Palettes from"../../../Core/Color/Palettes.js";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const SMAIndicator=SeriesRegistry.seriesTypes["sma"];import U from"../../../Core/Utilities.js";const{merge,extend}=U;class PCIndicator extends SMAIndicator{constructor(){super(...arguments),this.data=void 0,this.options=void 0,this.points=void 0}getValues(e,t){const i=t.period,o=e.xData,s=e.yData,r=s?s.length:0,a=[],n=[],p=[];let l,d,m,c,C,u,y;if(!(r<i)){for(y=i;y<=r;y++)c=o[y-1],C=s.slice(y-i,y),l=((d=(u=AU.getArrayExtremes(C,2,1))[1])+(m=u[0]))/2,a.push([c,d,l,m]),n.push(c),p.push([d,l,m]);return{values:a,xData:n,yData:p}}}}PCIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{index:void 0,period:20},lineWidth:1,topLine:{styles:{lineColor:Palettes.colors[2],lineWidth:1}},bottomLine:{styles:{lineColor:Palettes.colors[8],lineWidth:1}},dataGrouping:{approximation:"averages"}}),extend(PCIndicator.prototype,{areaLinesNames:["top","bottom"],nameBase:"Price Channel",nameComponents:["period"],linesApiNames:["topLine","bottomLine"],pointArrayMap:["top","middle","bottom"],pointValKey:"middle"}),MultipleLinesComposition.compose(PCIndicator),SeriesRegistry.registerSeriesType("pc",PCIndicator);export default PCIndicator;
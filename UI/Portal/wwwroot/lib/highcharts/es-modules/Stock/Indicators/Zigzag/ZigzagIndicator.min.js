"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const SMAIndicator=SeriesRegistry.seriesTypes["sma"];import U from"../../../Core/Utilities.js";const{merge,extend}=U;class ZigzagIndicator extends SMAIndicator{constructor(){super(...arguments),this.data=void 0,this.points=void 0,this.options=void 0}getValues(e,i){const t=i.lowIndex,s=i.highIndex,o=i.deviation/100,a=1+o,r=1-o,n=e.xData,d=e.yData,g=d?d.length:0,p=[],h=[],u=[];let c,l,m,v,x=!1,I=!1;if(!(!n||n.length<=1||g&&(void 0===d[0][t]||void 0===d[0][s]))){var f=d[0][t],S=d[0][s];for(c=1;c<g;c++)d[c][t]<=S*r?(p.push([n[0],S]),m=[n[c],d[c][t]],v=!0,x=!0):d[c][s]>=f*a&&(p.push([n[0],f]),m=[n[c],d[c][s]],v=!1,x=!0),x&&(h.push(p[0][0]),u.push(p[0][1]),l=c++,c=g);for(c=l;c<g;c++)v?(d[c][t]<=m[1]&&(m=[n[c],d[c][t]]),d[c][s]>=m[1]*a&&(I=s)):(d[c][s]>=m[1]&&(m=[n[c],d[c][s]]),d[c][t]<=m[1]*r&&(I=t)),!1!==I&&(p.push(m),h.push(m[0]),u.push(m[1]),m=[n[c],d[c][I]],v=!v,I=!1);i=p.length;return 0!==i&&p[i-1][0]<n[g-1]&&(p.push(m),h.push(m[0]),u.push(m[1])),{values:p,xData:h,yData:u}}}}ZigzagIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{index:void 0,period:void 0,lowIndex:2,highIndex:1,deviation:1}}),extend(ZigzagIndicator.prototype,{nameComponents:["deviation"],nameSuffixes:["%"],nameBase:"Zig Zag"}),SeriesRegistry.registerSeriesType("zigzag",ZigzagIndicator);export default ZigzagIndicator;
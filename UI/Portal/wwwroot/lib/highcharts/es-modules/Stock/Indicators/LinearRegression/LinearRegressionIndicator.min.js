"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const SMAIndicator=SeriesRegistry.seriesTypes["sma"];import U from"../../../Core/Utilities.js";const{isArray,extend,merge}=U;class LinearRegressionIndicator extends SMAIndicator{constructor(){super(...arguments),this.data=void 0,this.options=void 0,this.points=void 0}getRegressionLineParameters(e,t){function r(e,t){return isArray(e)?e[t]:e}const s=this.options.params.index,i=e.reduce(function(e,t){return t+e},0),n=t.reduce(function(e,t){return r(t,s)+e},0),a=i/e.length,o=n/t.length;let c,l,u,d=0,g=0;for(u=0;u<e.length;u++)c=e[u]-a,l=r(t[u],s)-o,d+=c*l,g+=Math.pow(c,2);var p=g?d/g:0;return{slope:p,intercept:o-p*a}}getEndPointY(e,t){return e.slope*t+e.intercept}transformXData(e,t){const r=e[0];return e.map(function(e){return(e-r)/t})}findClosestDistance(e){let t,r,s;for(s=1;s<e.length-1;s++)0<(t=e[s]-e[s-1])&&(void 0===r||t<r)&&(r=t);return r}getValues(e,t){const r=e.xData,s=e.yData,i=t.period,n={xData:[],yData:[],values:[]},a=this.options.params.xAxisUnit||this.findClosestDistance(r);let o,c,l,u,d,g,p,h,m;for(c=i-1;c<=r.length-1;c++)l=c-i+1,u=c+1,d=r[c],p=r.slice(l,u),h=s.slice(l,u),m=this.transformXData(p,a),o=this.getRegressionLineParameters(m,h),g=this.getEndPointY(o,m[m.length-1]),n.values.push({regressionLineParameters:o,x:d,y:g}),n.xData.push(d),n.yData.push(g);return n}}LinearRegressionIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{xAxisUnit:null},tooltip:{valueDecimals:4}}),extend(LinearRegressionIndicator.prototype,{nameBase:"Linear Regression Indicator"}),SeriesRegistry.registerSeriesType("linearRegression",LinearRegressionIndicator);export default LinearRegressionIndicator;
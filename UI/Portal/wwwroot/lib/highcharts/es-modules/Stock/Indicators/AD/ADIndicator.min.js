"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const SMAIndicator=SeriesRegistry.seriesTypes["sma"];import U from"../../../Core/Utilities.js";const{error,extend,merge}=U;class ADIndicator extends SMAIndicator{constructor(){super(...arguments),this.data=void 0,this.options=void 0,this.points=void 0}static populateAverage(e,t,r,i,s){var o=t[i][1],a=t[i][2],t=t[i][3],r=r[i];return[e[i],t===o&&t===a||o===a?0:(2*t-a-o)/(o-a)*r]}getValues(e,t){const r=t.period,i=e.xData,s=e.yData,o=t.volumeSeriesID,a=e.chart.get(o),n=a&&a.yData,d=s?s.length:0,u=[],c=[],p=[];let l,m,g;if(!(i.length<=r&&d&&4!==s[0].length)){if(a){for(m=r;m<d;m++)l=u.length,g=ADIndicator.populateAverage(i,s,n,m,r),0<l&&(g[1]+=u[l-1][1]),u.push(g),c.push(g[0]),p.push(g[1]);return{values:u,xData:c,yData:p}}error("Series "+o+" not found! Check `volumeSeriesID`.",!0,e.chart)}}}ADIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{index:void 0,volumeSeriesID:"volume"}}),extend(ADIndicator.prototype,{nameComponents:!1,nameBase:"Accumulation/Distribution"}),SeriesRegistry.registerSeriesType("ad",ADIndicator);export default ADIndicator;
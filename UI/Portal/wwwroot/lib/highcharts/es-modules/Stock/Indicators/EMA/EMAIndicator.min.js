"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const SMAIndicator=SeriesRegistry.seriesTypes["sma"];import U from"../../../Core/Utilities.js";const{correctFloat,isArray,merge}=U;class EMAIndicator extends SMAIndicator{constructor(){super(...arguments),this.data=void 0,this.options=void 0,this.points=void 0}accumulatePeriodPoints(e,t,r){let i=0,s=0,a;for(;s<e;)a=t<0?r[s]:r[s][t],i+=a,s++;return i}calculateEma(e,t,r,i,s,a,o){e=e[r-1],t=a<0?t[r-1]:t[r-1][a];return[e,void 0===s?o:correctFloat(t*i+s*(1-i))]}getValues(e,t){const r=t.period,i=e.xData,s=e.yData,a=s?s.length:0,o=2/(r+1),c=[],n=[],d=[];let u,l,p,m=-1,y;if(!(a<r)){for(isArray(s[0])&&(m=t.index||0),y=this.accumulatePeriodPoints(r,m,s)/r,p=r;p<a+1;p++)l=this.calculateEma(i,s,p,o,u,m,y),c.push(l),n.push(l[0]),d.push(l[1]),u=l[1];return{values:c,xData:n,yData:d}}}}EMAIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{index:3,period:9}}),SeriesRegistry.registerSeriesType("ema",EMAIndicator);export default EMAIndicator;
"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const SMAIndicator=SeriesRegistry.seriesTypes["sma"];import U from"../../../Core/Utilities.js";const{error,isArray,merge}=U;class VWAPIndicator extends SMAIndicator{constructor(){super(...arguments),this.data=void 0,this.points=void 0,this.options=void 0}getValues(e,r){const t=e.chart,s=e.xData,i=e.yData,o=r.period;let a=!0,u;if(u=t.get(r.volumeSeriesID))return isArray(i[0])||(a=!1),this.calculateVWAPValues(a,s,i,u,o);error("Series "+r.volumeSeriesID+" not found! Check `volumeSeriesID`.",!0,t)}calculateVWAPValues(e,r,t,s,i){const o=s.yData,a=s.xData.length,u=r.length,n=[],l=[],c=[],d=[],p=[];let S,h,m,g,v,y;for(S=u<=a?u:a,v=0,y=0;v<S;v++)h=e?(t[v][1]+t[v][2]+t[v][3])/3:t[v],h*=o[v],m=y?n[v-1]+h:h,g=y?l[v-1]+o[v]:o[v],n.push(m),l.push(g),p.push([r[v],m/g]),c.push(p[v][0]),d.push(p[v][1]),++y===i&&(y=0);return{values:p,xData:c,yData:d}}}VWAPIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{index:void 0,period:30,volumeSeriesID:"volume"}}),SeriesRegistry.registerSeriesType("vwap",VWAPIndicator);export default VWAPIndicator;
"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const SMAIndicator=SeriesRegistry.seriesTypes["sma"];import U from"../../../Core/Utilities.js";const{correctFloat,defined,extend,isArray,merge}=U;class DisparityIndexIndicator extends SMAIndicator{constructor(){super(...arguments),this.averageIndicator=void 0,this.data=void 0,this.options=void 0,this.points=void 0}init(){var e=arguments,t=this,a=e[1].params,a=a&&a.average?a.average:void 0;t.averageIndicator=SeriesRegistry.seriesTypes[a]||SMAIndicator,t.averageIndicator.prototype.init.apply(t,e)}calculateDisparityIndex(e,t){return correctFloat(e-t)/t*100}getValues(e,t){const a=t.index,i=e.xData,r=e.yData,s=r?r.length:0,n=[],o=[],d=[],p=this.averageIndicator,c=isArray(r[0]),y=p.prototype.getValues(e,t),g=y.yData,I=i.indexOf(y.xData[0]);if(g&&0!==g.length&&defined(a)&&!(r.length<=I)){for(let e=I;e<s;e++){var l=this.calculateDisparityIndex(c?r[e][a]:r[e],g[e-I]);n.push([i[e],l]),o.push(i[e]),d.push(l)}return{values:n,xData:o,yData:d}}}}DisparityIndexIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{average:"sma",index:3},marker:{enabled:!1},dataGrouping:{approximation:"averages"}}),extend(DisparityIndexIndicator.prototype,{nameBase:"Disparity Index",nameComponents:["period","average"]}),SeriesRegistry.registerSeriesType("disparityindex",DisparityIndexIndicator);export default DisparityIndexIndicator;
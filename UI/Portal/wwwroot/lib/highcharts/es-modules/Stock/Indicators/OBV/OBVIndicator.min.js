"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const SMAIndicator=SeriesRegistry.seriesTypes["sma"];import U from"../../../Core/Utilities.js";const{isNumber,error,extend,merge}=U;class OBVIndicator extends SMAIndicator{constructor(){super(...arguments),this.data=void 0,this.points=void 0,this.options=void 0}getValues(e,r){const t=e.chart.get(r.volumeSeriesID),s=e.xData,i=e.yData,o=[],a=[],n=[],d=!isNumber(i[0]);let u,p=1,c=0,m=0,l=0,v,S;if(t){for(S=t.yData,u=[s[0],c],l=d?i[0][3]:i[0],o.push(u),a.push(s[0]),n.push(u[1]),p;p<i.length;p++)v=d?i[p][3]:i[p],m=v>l?c+S[p]:v===l?c:c-S[p],u=[s[p],m],c=m,l=v,o.push(u),a.push(s[p]),n.push(u[1]);return{values:o,xData:a,yData:n}}error("Series "+r.volumeSeriesID+" not found! Check `volumeSeriesID`.",!0,e.chart)}}OBVIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{marker:{enabled:!1},params:{index:void 0,period:void 0,volumeSeriesID:"volume"},tooltip:{valueDecimals:0}}),extend(OBVIndicator.prototype,{nameComponents:void 0}),SeriesRegistry.registerSeriesType("obv",OBVIndicator);export default OBVIndicator;
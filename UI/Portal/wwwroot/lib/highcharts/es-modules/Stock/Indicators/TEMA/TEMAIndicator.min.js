"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const EMAIndicator=SeriesRegistry.seriesTypes["ema"];import U from"../../../Core/Utilities.js";const{correctFloat,isArray,merge}=U;class TEMAIndicator extends EMAIndicator{constructor(){super(...arguments),this.EMApercent=void 0,this.data=void 0,this.options=void 0,this.points=void 0}getEMA(e,t,l,r,i,s){return super.calculateEma(s||[],e,void 0===i?1:i,this.EMApercent,t,void 0===r?-1:r,l)}getTemaPoint(e,t,l,r){return[e[r-3],correctFloat(3*l.level1-3*l.level2+l.level3)]}getValues(e,t){const l=t.period,r=2*l,i=3*l,s=e.xData,o=e.yData,a=o?o.length:0,v=[],n=[],c=[],p=[],u=[],d={};let h=-1,A=0,g=0,E,M,m,y;if(this.EMApercent=2/(l+1),!(a<3*l-2)){for(isArray(o[0])&&(h=t.index||0),A=super.accumulatePeriodPoints(l,h,o),g=A/l,A=0,m=l;m<a+3;m++)m<a+1&&(d.level1=this.getEMA(o,E,g,h,m)[1],p.push(d.level1)),E=d.level1,m<r?A+=d.level1:(m===r&&(g=A/l,A=0),d.level1=p[m-l-1],d.level2=this.getEMA([d.level1],M,g)[1],u.push(d.level2),M=d.level2,m<i?A+=d.level2:(m===i&&(g=A/l),m===a+1&&(d.level1=p[m-l-1],d.level2=this.getEMA([d.level1],M,g)[1],u.push(d.level2)),d.level1=p[m-l-2],d.level2=u[m-2*l-1],d.level3=this.getEMA([d.level2],d.prevLevel3,g)[1],(y=this.getTemaPoint(s,i,d,m))&&(v.push(y),n.push(y[0]),c.push(y[1])),d.prevLevel3=d.level3));return{values:v,xData:n,yData:c}}}}TEMAIndicator.defaultOptions=merge(EMAIndicator.defaultOptions),SeriesRegistry.registerSeriesType("tema",TEMAIndicator);export default TEMAIndicator;
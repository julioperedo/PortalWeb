"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const SMAIndicator=SeriesRegistry.seriesTypes["sma"];import U from"../../../Core/Utilities.js";const{isNumber,merge}=U;function toFixed(e,t){return parseFloat(e.toFixed(t))}class RSIIndicator extends SMAIndicator{constructor(){super(...arguments),this.data=void 0,this.points=void 0,this.options=void 0}getValues(e,t){const i=t.period,s=e.xData,r=e.yData,o=r?r.length:0,a=t.decimals,d=[],n=[],c=[];let p=0,u=0,x=t.index,l=1,m,S,h,g,I,F;if(!(s.length<i)){for(F=isNumber(r[0])?r:(x=Math.min(x,r[0].length-1),r.map(e=>e[x]));l<i;)0<(S=toFixed(F[l]-F[l-1],a))?p+=S:u+=Math.abs(S),l++;for(h=toFixed(p/(i-1),a),g=toFixed(u/(i-1),a),I=l;I<o;I++)S=toFixed(F[I]-F[I-1],a),u=0<S?(p=S,0):(p=0,Math.abs(S)),h=toFixed((h*(i-1)+p)/i,a),g=toFixed((g*(i-1)+u)/i,a),m=0===g?100:0===h?0:toFixed(100-100/(1+h/g),a),d.push([s[I],m]),n.push(s[I]),c.push(m);return{values:d,xData:n,yData:c}}}}RSIIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{decimals:4,index:3}}),SeriesRegistry.registerSeriesType("rsi",RSIIndicator);export default RSIIndicator;
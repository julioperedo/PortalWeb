"use strict";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{prototype:smaProto}=SeriesRegistry.seriesTypes["sma"];import U from"../../Core/Utilities.js";const{defined,error,merge}=U;var MultipleLinesComposition;!function(t){const o=[],i=["bottomLine"],r=["top","bottom"],s=["top"];function g(t){return"plot"+t.charAt(0).toUpperCase()+t.slice(1)}function y(t,e){const o=[];return(t.pointArrayMap||[]).forEach(t=>{t!==e&&o.push(g(t))}),o}function a(){const o=this,t=o.pointValKey,e=o.linesApiNames,i=o.areaLinesNames,r=o.points,s=o.options,a=o.graph,n={options:{gapSize:s.gapSize}},p=[],l=y(o,t);let h=r.length,c;var f,m,u;l.forEach((t,e)=>{for(p[e]=[];h--;)c=r[h],p[e].push({x:c.x,plotX:c.plotX,plotY:c[t],isNull:!defined(c[t])});h=r.length}),o.userOptions.fillColor&&i.length&&(f=l.indexOf(g(i[0])),f=p[f],m=1===i.length?r:p[l.indexOf(g(i[1]))],u=o.color,o.points=m,o.nextPoints=f,o.color=o.userOptions.fillColor,o.options=merge(r,n),o.graph=o.area,o.fillGraph=!0,smaProto.drawGraph.call(o),o.area=o.graph,delete o.nextPoints,delete o.fillGraph,o.color=u),e.forEach((t,e)=>{p[e]?(o.points=p[e],s[t]?o.options=merge(s[t].styles,n):error('Error: "There is no '+t+' in DOCS options declared. Check if linesApiNames are consistent with your DOCS line names."'),o.graph=o["graph"+t],smaProto.drawGraph.call(o),o["graph"+t]=o.graph):error('Error: "'+t+" doesn't have equivalent in pointArrayMap. To many elements in linesApiNames relative to pointArrayMap.\"")}),o.points=r,o.options=s,o.graph=a,smaProto.drawGraph.call(o)}function n(t){let e,o=[],i;if(t=t||this.points,this.fillGraph&&this.nextPoints){if((e=smaProto.getGraphPath.call(this,this.nextPoints))&&e.length){e[0][0]="L",o=smaProto.getGraphPath.call(this,t);for(let t=(i=e.slice(0,o.length)).length-1;0<=t;t--)o.push(i[t])}}else o=smaProto.getGraphPath.apply(this,arguments);return o}function p(e){const o=[];return(this.pointArrayMap||[]).forEach(t=>{o.push(e[t])}),o}function l(){const t=this.pointArrayMap;let i,r;i=y(this),smaProto.translate.apply(this,arguments),this.points.forEach(o=>{t.forEach((t,e)=>{r=o[t],null!==(r=this.dataModify?this.dataModify.modifyValue(r):r)&&(o[i[e]]=this.yAxis.toPixels(r,!0))})})}t.compose=function(t){if(U.pushUnique(o,t)){const e=t.prototype;e.linesApiNames=e.linesApiNames||i.slice(),e.pointArrayMap=e.pointArrayMap||r.slice(),e.pointValKey=e.pointValKey||"top",e.areaLinesNames=e.areaLinesNames||s.slice(),e.drawGraph=a,e.getGraphPath=n,e.toYData=p,e.translate=l}return t}}(MultipleLinesComposition=MultipleLinesComposition||{});export default MultipleLinesComposition;
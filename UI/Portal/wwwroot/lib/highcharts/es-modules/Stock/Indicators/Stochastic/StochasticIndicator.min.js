"use strict";import AU from"../ArrayUtilities.js";import MultipleLinesComposition from"../MultipleLinesComposition.js";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const SMAIndicator=SeriesRegistry.seriesTypes["sma"];import U from"../../../Core/Utilities.js";const{extend,isArray,merge}=U;class StochasticIndicator extends SMAIndicator{constructor(){super(...arguments),this.data=void 0,this.options=void 0,this.points=void 0}init(){super.init.apply(this,arguments),this.options=merge({smoothedLine:{styles:{lineColor:this.color}}},this.options)}getValues(t,e){const i=e.periods[0],s=e.periods[1],o=t.xData,r=t.yData,a=r?r.length:0,n=[],p=[],l=[];let c,d,m,h=null,y,u,S;if(!(a<i)&&isArray(r[0])&&4===r[0].length){let t=!0,e=0;for(S=i-1;S<a;S++){var g;c=r.slice(S-i+1,S+1),d=(u=AU.getArrayExtremes(c,2,1))[0],m=(r[S][3]-d)/(u[1]-d)*100,isNaN(m)&&t?e++:(t&&!isNaN(m)&&(t=!1),g=p.push(o[S]),isNaN(m)?l.push([l[g-2]&&"number"==typeof l[g-2][0]?l[g-2][0]:null,null]):l.push([m,null]),S>=e+(i-1)+(s-1)&&(y=super.getValues({xData:p.slice(-s),yData:l.slice(-s)},{period:s}),h=y.yData[0]),n.push([o[S],m,h]),l[g-1][1]=h)}return{values:n,xData:p,yData:l}}}}StochasticIndicator.defaultOptions=merge(SMAIndicator.defaultOptions,{params:{index:void 0,period:void 0,periods:[14,3]},marker:{enabled:!1},tooltip:{pointFormat:'<span style="color:{point.color}">‚óè</span><b> {series.name}</b><br/>%K: {point.y}<br/>%D: {point.smoothed}<br/>'},smoothedLine:{styles:{lineWidth:1,lineColor:void 0}},dataGrouping:{approximation:"averages"}}),extend(StochasticIndicator.prototype,{areaLinesNames:[],nameComponents:["periods"],nameBase:"Stochastic",pointArrayMap:["y","smoothed"],parallelArrays:["x","y","smoothed"],pointValKey:"y",linesApiNames:["smoothedLine"]}),MultipleLinesComposition.compose(StochasticIndicator),SeriesRegistry.registerSeriesType("stochastic",StochasticIndicator);export default StochasticIndicator;
"use strict";import SeriesRegistry from"../../../Core/Series/SeriesRegistry.js";const{sma:SMAIndicator,stochastic:StochasticIndicator}=SeriesRegistry.seriesTypes;import U from"../../../Core/Utilities.js";const{extend,merge}=U;class SlowStochasticIndicator extends StochasticIndicator{constructor(){super(...arguments),this.data=void 0,this.options=void 0,this.points=void 0}getValues(t,a){const e=a.periods,s=super.getValues.call(this,t,a),i={values:[],xData:[],yData:[]};if(s){i.xData=s.xData.slice(e[1]-1);var o=s.yData.slice(e[1]-1),r=SMAIndicator.prototype.getValues.call(this,{xData:i.xData,yData:o},{index:1,period:e[2]});if(r){for(let t=0,a=i.xData.length;t<a;t++)i.yData[t]=[o[t][1],r.yData[t-e[2]+1]||null],i.values[t]=[i.xData[t],o[t][1],r.yData[t-e[2]+1]||null];return i}}}}SlowStochasticIndicator.defaultOptions=merge(StochasticIndicator.defaultOptions,{params:{periods:[14,3,3]}}),extend(SlowStochasticIndicator.prototype,{nameBase:"Slow Stochastic"}),SeriesRegistry.registerSeriesType("slowstochastic",SlowStochasticIndicator);export default SlowStochasticIndicator;
"use strict";import D from"../../Core/Defaults.js";const defaultOptions=D["defaultOptions"];import H from"../../Core/Globals.js";import ScrollbarAxis from"../../Core/Axis/ScrollbarAxis.js";import ScrollbarDefaults from"./ScrollbarDefaults.js";import U from"../../Core/Utilities.js";const{addEvent,correctFloat,defined,destroyObjectProperties,fireEvent,merge,pick,removeEvent}=U;class Scrollbar{static compose(r){ScrollbarAxis.compose(r,Scrollbar)}static swapXY(r,t){return t&&r.forEach(t=>{var o,e=t.length;for(let r=0;r<e;r+=2)"number"==typeof(o=t[r+1])&&(t[r+1]=t[r+2],t[r+2]=o)}),r}constructor(r,t,o){this._events=[],this.chart=void 0,this.chartX=0,this.chartY=0,this.from=0,this.group=void 0,this.options=void 0,this.renderer=void 0,this.scrollbar=void 0,this.scrollbarButtons=[],this.scrollbarGroup=void 0,this.scrollbarLeft=0,this.scrollbarRifles=void 0,this.scrollbarStrokeWidth=1,this.scrollbarTop=0,this.size=0,this.to=0,this.track=void 0,this.trackBorderWidth=1,this.userOptions=void 0,this.x=0,this.y=0,this.init(r,t,o)}addEvents(){var r=this.options.inverted?[1,0]:[0,1],t=this.scrollbarButtons,o=this.scrollbarGroup.element,e=this.track.element,s=this.mouseDownHandler.bind(this),a=this.mouseMoveHandler.bind(this),i=this.mouseUpHandler.bind(this);const l=[[t[r[0]].element,"click",this.buttonToMinClick.bind(this)],[t[r[1]].element,"click",this.buttonToMaxClick.bind(this)],[e,"click",this.trackClick.bind(this)],[o,"mousedown",s],[o.ownerDocument,"mousemove",a],[o.ownerDocument,"mouseup",i]];H.hasTouch&&l.push([o,"touchstart",s],[o.ownerDocument,"touchmove",a],[o.ownerDocument,"touchend",i]),l.forEach(function(r){addEvent.apply(null,r)}),this._events=l}buttonToMaxClick(r){var t=this,o=(t.to-t.from)*pick(t.options.step,.2);t.updatePosition(t.from+o,t.to+o),fireEvent(t,"changed",{from:t.from,to:t.to,trigger:"scrollbar",DOMEvent:r})}buttonToMinClick(r){var t=this,o=correctFloat(t.to-t.from)*pick(t.options.step,.2);t.updatePosition(correctFloat(t.from-o),correctFloat(t.to-o)),fireEvent(t,"changed",{from:t.from,to:t.to,trigger:"scrollbar",DOMEvent:r})}cursorToScrollbarPosition(r){var t=this,o=t.options,o=o.minWidth>t.calculatedWidth?o.minWidth:0;return{chartX:(r.chartX-t.x-t.xOffset)/(t.barWidth-o),chartY:(r.chartY-t.y-t.yOffset)/(t.barWidth-o)}}destroy(){const t=this,r=t.chart.scroller;t.removeEvents(),["track","scrollbarRifles","scrollbar","scrollbarGroup","group"].forEach(function(r){t[r]&&t[r].destroy&&(t[r]=t[r].destroy())}),r&&t===r.scrollbar&&(r.scrollbar=null,destroyObjectProperties(r.scrollbarButtons))}drawScrollbarButton(r){const t=this,o=t.renderer,e=t.scrollbarButtons,s=t.options,a=t.size,i=o.g().add(t.group);if(e.push(i),s.buttonsEnabled){const l=o.rect().addClass("highcharts-scrollbar-button").add(i),c=(t.chart.styledMode||l.attr({stroke:s.buttonBorderColor,"stroke-width":s.buttonBorderWidth,fill:s.buttonBackgroundColor}),l.attr(l.crisp({x:-.5,y:-.5,width:a+1,height:a+1,r:s.buttonBorderRadius},l.strokeWidth())),o.path(Scrollbar.swapXY([["M",a/2+(r?-1:1),a/2-3],["L",a/2+(r?-1:1),a/2+3],["L",a/2+(r?2:-2),a/2]],s.vertical)).addClass("highcharts-scrollbar-arrow").add(e[r]));t.chart.styledMode||c.attr({fill:s.buttonArrowColor})}}init(r,t,o){var e=this;e.scrollbarButtons=[],e.renderer=r,e.userOptions=t,e.options=merge(ScrollbarDefaults,defaultOptions.scrollbar,t),e.options.margin=pick(e.options.margin,10),e.chart=o,e.size=pick(e.options.size,e.options.height),t.enabled&&(e.render(),e.addEvents())}mouseDownHandler(r){var t=this,r=t.chart.pointer.normalize(r),r=t.cursorToScrollbarPosition(r);t.chartX=r.chartX,t.chartY=r.chartY,t.initPositions=[t.from,t.to],t.grabbedCenter=!0}mouseMoveHandler(r){var t=this,o=t.chart.pointer.normalize(r),e=t.options.vertical?"chartY":"chartX",s=t.initPositions||[];!t.grabbedCenter||r.touches&&0===r.touches[0][e]||(o=t.cursorToScrollbarPosition(o)[e]-t[e],t.hasDragged=!0,t.updatePosition(s[0]+o,s[1]+o),t.hasDragged&&fireEvent(t,"changed",{from:t.from,to:t.to,trigger:"scrollbar",DOMType:r.type,DOMEvent:r}))}mouseUpHandler(r){var t=this;t.hasDragged&&fireEvent(t,"changed",{from:t.from,to:t.to,trigger:"scrollbar",DOMType:r.type,DOMEvent:r}),t.grabbedCenter=t.hasDragged=t.chartX=t.chartY=null}position(r,t,o,e){var s=this,{buttonsEnabled:a,margin:i=0,vertical:l}=s.options,c=s.rendered?"animate":"attr";let h=e,n=0;s.group.show(),s.x=r,s.y=t+this.trackBorderWidth,s.width=o,s.height=e,s.xOffset=h,s.yOffset=n,l?(s.width=s.yOffset=o=n=s.size,s.xOffset=h=0,s.yOffset=n=a?s.size:0,s.barWidth=e-(a?2*o:0),s.x=r+=i):(s.height=e=s.size,s.xOffset=h=a?s.size:0,s.barWidth=o-(a?2*e:0),s.y=s.y+i),s.group[c]({translateX:r,translateY:s.y}),s.track[c]({width:o,height:e}),s.scrollbarButtons[1][c]({translateX:l?0:o-h,translateY:l?e-n:0})}removeEvents(){this._events.forEach(function(r){removeEvent.apply(null,r)}),this._events.length=0}render(){const r=this,t=r.renderer,o=r.options,e=r.size,s=r.chart.styledMode,a=t.g("scrollbar").attr({zIndex:o.zIndex}).hide().add();r.group=a,r.track=t.rect().addClass("highcharts-scrollbar-track").attr({r:o.trackBorderRadius||0,height:e,width:e}).add(a),s||r.track.attr({fill:o.trackBackgroundColor,stroke:o.trackBorderColor,"stroke-width":o.trackBorderWidth});var i=r.trackBorderWidth=r.track.strokeWidth();r.track.attr({x:-i%2/2,y:-i%2/2}),r.scrollbarGroup=t.g().add(a),r.scrollbar=t.rect().addClass("highcharts-scrollbar-thumb").attr({height:e-i,width:e-i,r:o.barBorderRadius||0}).add(r.scrollbarGroup),r.scrollbarRifles=t.path(Scrollbar.swapXY([["M",-3,e/4],["L",-3,2*e/3],["M",0,e/4],["L",0,2*e/3],["M",3,e/4],["L",3,2*e/3]],o.vertical)).addClass("highcharts-scrollbar-rifles").add(r.scrollbarGroup),s||(r.scrollbar.attr({fill:o.barBackgroundColor,stroke:o.barBorderColor,"stroke-width":o.barBorderWidth}),r.scrollbarRifles.attr({stroke:o.rifleColor,"stroke-width":1})),r.scrollbarStrokeWidth=r.scrollbar.strokeWidth(),r.scrollbarGroup.translate(-r.scrollbarStrokeWidth%2/2,-r.scrollbarStrokeWidth%2/2),r.drawScrollbarButton(0),r.drawScrollbarButton(1)}setRange(o,e){var s=this,a=s.options,i=a.vertical,l=a.minWidth,c=s.barWidth,h=!this.rendered||this.hasDragged||this.chart.navigator&&this.chart.navigator.hasDragged?"attr":"animate";if(defined(c)){var n=c*Math.min(e,1);let r,t;o=Math.max(o,0),r=Math.ceil(c*o),s.calculatedWidth=t=correctFloat(n-r),t<l&&(r=(c-l+t)*o,t=l);n=Math.floor(r+s.xOffset+s.yOffset),c=t/2-.5;s.from=o,s.to=e,i?(s.scrollbarGroup[h]({translateY:n}),s.scrollbar[h]({height:t}),s.scrollbarRifles[h]({translateY:c}),s.scrollbarTop=n,s.scrollbarLeft=0):(s.scrollbarGroup[h]({translateX:n}),s.scrollbar[h]({width:t}),s.scrollbarRifles[h]({translateX:c}),s.scrollbarLeft=n,s.scrollbarTop=0),t<=12?s.scrollbarRifles.hide():s.scrollbarRifles.show(),!1===a.showFull&&(o<=0&&1<=e?s.group.hide():s.group.show()),s.rendered=!0}}shouldUpdateExtremes(r){return pick(this.options.liveRedraw,H.svg&&!H.isTouchDevice&&!this.chart.boosted)||"mouseup"===r||"touchend"===r||!defined(r)}trackClick(r){var t=this,o=t.chart.pointer.normalize(r),e=t.to-t.from,s=t.y+t.scrollbarTop,a=t.x+t.scrollbarLeft;t.options.vertical&&o.chartY>s||!t.options.vertical&&o.chartX>a?t.updatePosition(t.from+e,t.to+e):t.updatePosition(t.from-e,t.to-e),fireEvent(t,"changed",{from:t.from,to:t.to,trigger:"scrollbar",DOMEvent:r})}update(r){this.destroy(),this.init(this.chart.renderer,merge(!0,this.options,r),this.chart)}updatePosition(r,t){1<t&&(r=correctFloat(1-correctFloat(t-r)),t=1),r<0&&(t=correctFloat(t-r),r=0),this.from=r,this.to=t}}Scrollbar.defaultOptions=ScrollbarDefaults,defaultOptions.scrollbar=merge(!0,Scrollbar.defaultOptions,defaultOptions.scrollbar);export default Scrollbar;
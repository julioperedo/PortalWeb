"use strict";import H from"../../Core/Globals.js";const deg2rad=H["deg2rad"];import Pie3DPoint from"./Pie3DPoint.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const PieSeries=SeriesRegistry.seriesTypes["pie"];import U from"../../Core/Utilities.js";const{extend,pick,pushUnique}=U,composedMembers=[];class Pie3DSeries extends PieSeries{static compose(t){pushUnique(composedMembers,t)&&(t.types.pie=Pie3DSeries)}addPoint(){super.addPoint.apply(this,arguments),this.chart.is3d()&&this.update(this.userOptions,!0)}animate(s){if(this.chart.is3d()){const a=this.center,i=this.group,r=this.markerGroup;let t=this.options.animation,e;!0===t&&(t={}),s?(i.oldtranslateX=pick(i.oldtranslateX,i.translateX),i.oldtranslateY=pick(i.oldtranslateY,i.translateY),e={translateX:a[0],translateY:a[1],scaleX:.001,scaleY:.001},i.attr(e),r&&(r.attrSetters=i.attrSetters,r.attr(e))):(e={translateX:i.oldtranslateX,translateY:i.oldtranslateY,scaleX:1,scaleY:1},i.animate(e,t),r&&r.animate(e,t))}else super.animate.apply(this,arguments)}getDataLabelPosition(t,e){e=super.getDataLabelPosition(t,e);if(this.chart.is3d()){var s=this.chart.options.chart.options3d,t=t.shapeArgs,a=t.r,i=(t.alpha||s?.alpha)*deg2rad,s=(t.beta||s?.beta)*deg2rad,t=(t.start+t.end)/2,r=e.connectorPosition,o=-a*(1-Math.cos(i))*Math.sin(t),n=a*(Math.cos(s)-1)*Math.cos(t);for(const p of[e?.natural,r.breakAt,r.touchingSliceAt])p.x+=n,p.y+=o}return e}pointAttribs(t){const e=super.pointAttribs.apply(this,arguments),s=this.options;return this.chart.is3d()&&!this.chart.styledMode&&(e.stroke=s.edgeColor||t.color||this.color,e["stroke-width"]=pick(s.edgeWidth,1)),e}translate(){if(super.translate.apply(this,arguments),this.chart.is3d()){var e=this,s=e.options,a=s.depth||0,i=e.chart.options.chart.options3d,r=i.alpha,o=i.beta;let t=s.stacking?(s.stack||0)*a:e._i*a;t+=a/2,!1!==s.grouping&&(t=0);for(const p of e.data){const c=p.shapeArgs;p.shapeType="arc3d",c.z=t,c.depth=.75*a,c.alpha=r,c.beta=o,c.center=e.center;var n=(c.end+c.start)/2;p.slicedTranslation={translateX:Math.round(Math.cos(n)*s.slicedOffset*Math.cos(r*deg2rad)),translateY:Math.round(Math.sin(n)*s.slicedOffset*Math.cos(r*deg2rad))}}}}drawTracker(){if(super.drawTracker.apply(this,arguments),this.chart.is3d())for(const t of this.points)if(t.graphic)for(const e of["out","inn","side1","side2"])t.graphic&&(t.graphic[e].element.point=t)}}extend(Pie3DSeries.prototype,{pointClass:Pie3DPoint});export default Pie3DSeries;
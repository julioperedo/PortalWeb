"use strict";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{treemap:TreemapSeries}=SeriesRegistry["seriesTypes"];import U from"../../Core/Utilities.js";const{isNumber,isObject,merge}=U;function calculateLevelSizes(e,i){i=isObject(i)?i:{};let t,r=0,s,l,o,u,n,c;if(isObject(e)){t=merge({},e),n=isNumber(i.from)?i.from:0,c=isNumber(i.to)?i.to:0,l=range(n,c),o=Object.keys(t).filter(e=>-1===l.indexOf(+e)),s=u=isNumber(i.diffRadius)?i.diffRadius:0;for(const f of l){const v=t[f],m=v.levelSize.unit,S=v.levelSize.value;"weight"===m?r+=S:"percentage"===m?(v.levelSize={unit:"pixels",value:S/100*s},u-=v.levelSize.value):"pixels"===m&&(u-=S)}for(const g of l){var a=t[g];"weight"===a.levelSize.unit&&(a=a.levelSize.value,t[g].levelSize={unit:"pixels",value:a/r*u})}for(const p of o)t[p].levelSize={value:0,unit:"pixels"}}return t}function getLevelFromAndTo({level:e,height:i}){return{from:0<e?e:1,to:e+i}}function range(i,t){const r=[];if(isNumber(i)&&isNumber(t)&&i<=t)for(let e=i;e<=t;e++)r.push(e);return r}const SunburstUtilities={calculateLevelSizes:calculateLevelSizes,getLevelFromAndTo:getLevelFromAndTo,range:range,recursive:TreemapSeries.prototype.utils.recursive};export default SunburstUtilities;
"use strict";import Axis from"../Core/Axis/Axis.js";import Point from"../Core/Series/Point.js";import Series from"../Core/Series/Series.js";const{tooltipFormatter:pointTooltipFormatter}=Point["prototype"];import U from"../Core/Utilities.js";const{addEvent,arrayMax,arrayMin,correctFloat,defined,isArray,isNumber,isString,pick}=U;var DataModifyComposition;!function(t){const r=[];function n(i,e,t){this.isXAxis||(this.series.forEach(function(t){"compare"===i&&"boolean"!=typeof e?t.setCompare(e,!1):"cumulative"!==i||isString(e)||t.setCumulative(e,!1)}),pick(t,!0)&&this.chart.redraw())}function u(i){function t(t){i=i.replace("{point."+t+"}",(0<e[t]&&"change"===t?"+":"")+o(e[t],pick(e.series.tooltipOptions.changeDecimals,2)))}const e=this,o=e.series.chart["numberFormatter"];return defined(e.change)&&t("change"),defined(e.cumulativeSum)&&t("cumulativeSum"),pointTooltipFormatter.apply(this,[i])}function p(){var t=this.options.compare;let i;"percent"!==t&&"value"!==t&&!this.options.cumulative||(i=new o(this),"percent"===t||"value"===t?i.initCompare(t):i.initCumulative()),this.dataModify=i}function c(t){const i=t.dataExtremes,e=i.activeYData;if(this.dataModify&&i){let t;this.options.compare?t=[this.dataModify.modifyValue(i.dataMin),this.dataModify.modifyValue(i.dataMax)]:this.options.cumulative&&isArray(e)&&2<=e.length&&(t=o.getCumulativeExtremes(e)),t&&(i.dataMin=arrayMin(t),i.dataMax=arrayMax(t))}}function m(t,i){this.options.compare=this.userOptions.compare=t,this.update({},pick(i,!0)),!this.dataModify||"value"!==t&&"percent"!==t?this.points.forEach(t=>{delete t.change}):this.dataModify.initCompare(t)}function d(){var e=this;if(e.xAxis&&e.processedYData&&e.dataModify){var o=e.processedXData,a=e.processedYData,s=a.length,r=!0===e.options.compareStart?0:1;let t=-1,i;for(e.pointArrayMap&&(t=e.pointArrayMap.indexOf(e.options.pointValKey||e.pointValKey||"y")),i=0;i<s-r;i++){var n=a[i]&&-1<t?a[i][t]:a[i];if(isNumber(n)&&0!==n&&o[i+r]>=(e.xAxis.min||0)){e.dataModify.compareValue=n;break}}}}function f(t,i){this.setModifier("compare",t,i)}function l(t,i){t=pick(t,!1),this.options.cumulative=this.userOptions.cumulative=t,this.update({},pick(i,!0)),this.dataModify?this.dataModify.initCumulative():this.points.forEach(t=>{delete t.cumulativeSum})}function h(t,i){this.setModifier("cumulative",t,i)}t.compose=function(t,i,e){if(U.pushUnique(r,t)){const o=t.prototype;o.setCompare=m,o.setCumulative=l,addEvent(t,"afterInit",p),addEvent(t,"afterGetExtremes",c),addEvent(t,"afterProcessData",d)}if(U.pushUnique(r,i)){const a=i.prototype;a.setCompare=f,a.setModifier=n,a.setCumulative=h}if(U.pushUnique(r,e)){const s=e.prototype;s.tooltipFormatter=u}return t};class o{constructor(t){this.series=t}modifyValue(){return 0}static getCumulativeExtremes(t){let e=1/0,o=-1/0;return t.reduce((t,i)=>{i=t+i;return e=Math.min(e,i,t),o=Math.max(o,i,t),i}),[e,o]}initCompare(a){this.modifyValue=function(t,i){var e=this.compareValue;if(void 0===(t=null===t?0:t)||void 0===e)return 0;if("value"===a?t-=e:t=t/e*100-(100===this.series.options.compareBase?0:100),void 0!==i){const o=this.series.points[i];o&&(o.change=t)}return t}}initCumulative(){this.modifyValue=function(t,i){if(void 0===(t=null===t?0:t)||void 0===i)return 0;{var e=0<i?this.series.points[i-1]:null;e&&e.cumulativeSum&&(t=correctFloat(e.cumulativeSum+t));const o=this.series.points[i];return o&&(o.cumulativeSum=t),t}}}}t.Additions=o}(DataModifyComposition=DataModifyComposition||{});export default DataModifyComposition;
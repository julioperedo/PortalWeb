"use strict";import LollipopPoint from"./LollipopPoint.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";import Series from"../../Core/Series/Series.js";const{column:{prototype:colProto},dumbbell:{prototype:dumbbellProto},scatter:ScatterSeries}=SeriesRegistry["seriesTypes"];import U from"../../Core/Utilities.js";const{extend,merge}=U;class LollipopSeries extends Series{constructor(){super(...arguments),this.data=void 0,this.options=void 0,this.points=void 0}drawPoints(){var o=this,t=o.points.length;let e=0,i;for(super.drawPoints.apply(o,arguments);e<t;)i=o.points[e],o.drawConnector(i),e++}translate(){colProto.translate.apply(this,arguments);for(const o of this.points){const{pointWidth:t,shapeArgs:e}=o;e?.x&&(e.x+=t/2,o.plotX=e.x||0)}}}LollipopSeries.defaultOptions=merge(Series.defaultOptions,{threshold:0,connectorWidth:1,groupPadding:.2,pointPadding:.1,states:{hover:{lineWidthPlus:0,connectorWidthPlus:1,halo:!1}},lineWidth:0,dataLabels:{align:void 0,verticalAlign:void 0},pointRange:1}),extend(LollipopSeries.prototype,{alignDataLabel:colProto.alignDataLabel,crispCol:colProto.crispCol,drawConnector:dumbbellProto.drawConnector,drawDataLabels:colProto.drawDataLabels,getColumnMetrics:colProto.getColumnMetrics,getConnectorAttribs:dumbbellProto.getConnectorAttribs,pointClass:LollipopPoint}),SeriesRegistry.registerSeriesType("lollipop",LollipopSeries);export default LollipopSeries;
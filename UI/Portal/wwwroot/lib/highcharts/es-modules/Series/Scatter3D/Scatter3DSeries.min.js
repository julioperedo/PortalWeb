"use strict";import Math3D from"../../Core/Math3D.js";const pointCameraDistance=Math3D["pointCameraDistance"];import Scatter3DPoint from"./Scatter3DPoint.js";import Scatter3DSeriesDefaults from"./Scatter3DSeriesDefaults.js";import ScatterSeries from"../Scatter/ScatterSeries.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";import U from"../../Core/Utilities.js";const{extend,merge}=U;class Scatter3DSeries extends ScatterSeries{constructor(){super(...arguments),this.data=void 0,this.options=void 0,this.points=void 0}pointAttribs(t){const e=super.pointAttribs.apply(this,arguments);return this.chart.is3d()&&t&&(e.zIndex=pointCameraDistance(t,this.chart)),e}}Scatter3DSeries.defaultOptions=merge(ScatterSeries.defaultOptions,Scatter3DSeriesDefaults),extend(Scatter3DSeries.prototype,{axisTypes:["xAxis","yAxis","zAxis"],directTouch:!0,parallelArrays:["x","y","z"],pointArrayMap:["x","y","z"],pointClass:Scatter3DPoint}),SeriesRegistry.registerSeriesType("scatter3d",Scatter3DSeries);export default Scatter3DSeries;
"use strict";import H from"../../Core/Globals.js";const noop=H["noop"];import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{column:ColumnSeries,heatmap:HeatmapSeries,scatter:ScatterSeries}=SeriesRegistry.seriesTypes;import TilemapPoint from"./TilemapPoint.js";import TilemapSeriesDefaults from"./TilemapSeriesDefaults.js";import TilemapShapes from"./TilemapShapes.js";import U from"../../Core/Utilities.js";const{addEvent,extend,merge,pushUnique}=U,composedMembers=[];function onAxisAfterSetAxisTranslation(){if(!this.recomputingForTilemap&&"colorAxis"!==this.coll){const t=this,e=t.series.map(function(e){return e.getSeriesPixelPadding&&e.getSeriesPixelPadding(t)}).reduce(function(e,t){return(e&&e.padding)>(t&&t.padding)?e:t},void 0)||{padding:0,axisLengthFactor:1},i=Math.round(e.padding*e.axisLengthFactor);e.padding&&(t.len-=i,t.recomputingForTilemap=!0,t.setAxisTranslation(),delete t.recomputingForTilemap,t.minPixelPadding+=e.padding,t.len+=i)}}class TilemapSeries extends HeatmapSeries{constructor(){super(...arguments),this.data=void 0,this.options=void 0,this.points=void 0,this.tileShape=void 0}static compose(e){pushUnique(composedMembers,e)&&addEvent(e,"afterSetAxisTranslation",onAxisAfterSetAxisTranslation)}alignDataLabel(){return this.tileShape.alignDataLabel.apply(this,arguments)}drawPoints(){ColumnSeries.prototype.drawPoints.call(this);for(const e of this.points)e.graphic&&e.graphic[this.chart.styledMode?"css":"animate"](this.colorAttribs(e))}getSeriesPixelPadding(e){var t=e.isXAxis,i=this.tileShape.getSeriesPadding(this);if(!i)return{padding:0,axisLengthFactor:1};var s=Math.round(e.translate(t?2*i.xPad:i.yPad,0,1,0,1)),i=Math.round(e.translate(t?i.xPad:0,0,1,0,1));return{padding:(e.single?Math.abs(s-i)/2:Math.abs(s-i))||0,axisLengthFactor:t?2:1.1}}setOptions(){var e=super.setOptions.apply(this,arguments);return this.tileShape=TilemapShapes[e.tileShape],e}translate(){return this.tileShape.translate.apply(this,arguments)}}TilemapSeries.defaultOptions=merge(HeatmapSeries.defaultOptions,TilemapSeriesDefaults),extend(TilemapSeries.prototype,{getSymbol:noop,markerAttribs:ScatterSeries.prototype.markerAttribs,pointAttribs:ColumnSeries.prototype.pointAttribs,pointClass:TilemapPoint}),SeriesRegistry.registerSeriesType("tilemap",TilemapSeries);export default TilemapSeries;
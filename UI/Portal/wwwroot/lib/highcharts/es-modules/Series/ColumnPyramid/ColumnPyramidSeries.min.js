"use strict";import ColumnPyramidSeriesDefaults from"./ColumnPyramidSeriesDefaults.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const ColumnSeries=SeriesRegistry.seriesTypes["column"];import U from"../../Core/Utilities.js";const{clamp,merge,pick}=U;class ColumnPyramidSeries extends ColumnSeries{constructor(){super(...arguments),this.data=void 0,this.options=void 0,this.points=void 0}translate(){const u=this,c=u.chart,y=u.options,e=u.dense=u.closestPointRange*u.xAxis.transA<2,t=u.borderWidth=pick(y.borderWidth,e?0:1),g=u.yAxis,f=y.threshold,S=pick(y.minPointLength,5),C=u.getColumnMetrics(),P=C.width,x=u.pointXOffset=C.offset;let M=u.translatedThreshold=g.getThreshold(f),v=u.barW=Math.max(P,1+2*t);c.inverted&&(M-=.5),y.pointPadding&&(v=Math.ceil(v)),super.translate();for(const L of u.points){var T=pick(L.yBottom,M),b=999+Math.abs(T),b=clamp(L.plotY,-b,g.len+b),k=v/2,A=Math.min(b,T),T=Math.max(b,T)-A;let e=L.plotX+x,t,i,s,o,r,n,a,l,p,d,m,h;y.centerInCategory&&(e=u.adjustForMissingColumns(e,P,L,C)),L.barX=e,L.pointWidth=P,L.tooltipPos=c.inverted?[g.len+g.pos-c.plotLeft-b,u.xAxis.len-e-k,T]:[e+k,b+g.pos-c.plotTop,T],t=f+(L.total||L.y),"percent"===y.stacking&&(t=f+(L.y<0)?-100:100),s=g.toPixels(t,!0),o=(i=c.plotHeight-s-(c.plotHeight-M))?k*(A-s)/i:0,r=i?k*(A+T-s)/i:0,a=e-o+k,l=e+o+k,p=e+r+k,d=e-r+k,m=A-S,h=A+T,L.y<0&&(m=A,h=A+T+S),c.inverted&&(o=k*(s-(n=g.width-A))/(i=s-(g.width-M)),r=k*(s-(n-T))/i,a=e+k+o,l=a-2*o,p=e-r+k,d=e+r+k,m=A,h=A+T-S,L.y<0&&(h=A+T+S)),L.shapeType="path",L.shapeArgs={x:a,y:m,width:l-a,height:T,d:[["M",a,m],["L",l,m],["L",p,h],["L",d,h],["Z"]]}}}}ColumnPyramidSeries.defaultOptions=merge(ColumnSeries.defaultOptions,ColumnPyramidSeriesDefaults),SeriesRegistry.registerSeriesType("columnpyramid",ColumnPyramidSeries);export default ColumnPyramidSeries;
"use strict";import DerivedComposition from"../DerivedComposition.js";import ParetoSeriesDefaults from"./ParetoSeriesDefaults.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const LineSeries=SeriesRegistry.seriesTypes["line"];import U from"../../Core/Utilities.js";const{correctFloat,merge,extend}=U;class ParetoSeries extends LineSeries{constructor(){super(...arguments),this.data=void 0,this.points=void 0,this.options=void 0}sumPointsPercents(e,s,t,r){const i=[];let o=0,a=0,n=0,p;for(const S of e)null!==S&&(r?a+=S:(p=S/t*100,i.push([s[o],correctFloat(n+p)]),n+=p)),++o;return r?a:i}setDerivedData(){var e=this.baseSeries.xData,s=this.baseSeries.yData,t=this.sumPointsPercents(s,e,null,!0);this.setData(this.sumPointsPercents(s,e,t,!1),!1)}}ParetoSeries.defaultOptions=merge(LineSeries.defaultOptions,ParetoSeriesDefaults),extend(ParetoSeries.prototype,{hasDerivedData:DerivedComposition.hasDerivedData}),DerivedComposition.compose(ParetoSeries),SeriesRegistry.registerSeriesType("pareto",ParetoSeries);export default ParetoSeries;
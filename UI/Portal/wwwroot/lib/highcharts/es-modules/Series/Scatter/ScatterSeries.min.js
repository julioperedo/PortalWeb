"use strict";import ScatterSeriesDefaults from"./ScatterSeriesDefaults.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{column:ColumnSeries,line:LineSeries}=SeriesRegistry.seriesTypes;import U from"../../Core/Utilities.js";const{addEvent,extend,merge}=U;class ScatterSeries extends LineSeries{constructor(){super(...arguments),this.data=void 0,this.options=void 0,this.points=void 0}applyJitter(){const p=this,S=this.options.jitter,c=this.points.length;S&&this.points.forEach(function(a,n){["x","y"].forEach(function(e,t){var r,i,s,o="plot"+e.toUpperCase();S[e]&&!a.isNull&&(i=p[e+"Axis"],s=S[e]*i.transA,i&&!i.isLog&&(r=Math.max(0,a[o]-s),i=Math.min(i.len,a[o]+s),a[o]=r+(i-r)*(s=n+t*c,(s=1e4*Math.sin(s))-Math.floor(s)),"x"===e&&(a.clientX=a.plotX)))})})}drawGraph(){this.options.lineWidth?super.drawGraph():this.graph&&(this.graph=this.graph.destroy())}}ScatterSeries.defaultOptions=merge(LineSeries.defaultOptions,ScatterSeriesDefaults),extend(ScatterSeries.prototype,{drawTracker:ColumnSeries.prototype.drawTracker,sorted:!1,requireSorting:!1,noSharedTooltip:!0,trackerGroups:["group","markerGroup","dataLabelsGroup"],takeOrdinalPosition:!1}),addEvent(ScatterSeries,"afterTranslate",function(){this.applyJitter()}),SeriesRegistry.registerSeriesType("scatter",ScatterSeries);export default ScatterSeries;
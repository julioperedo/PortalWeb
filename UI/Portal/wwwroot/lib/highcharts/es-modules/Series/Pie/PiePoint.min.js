"use strict";import A from"../../Core/Animation/AnimationUtilities.js";const setAnimation=A["setAnimation"];import Point from"../../Core/Series/Point.js";import U from"../../Core/Utilities.js";const{addEvent,defined,extend,isNumber,isString,pick,relativeLength}=U;class PiePoint extends Point{constructor(){super(...arguments),this.half=0,this.options=void 0,this.series=void 0}getConnectorPath(t){const i=t.dataLabelPosition,e=t.options||{},s=e.connectorShape,n=this.connectorShapes[s]||s;return i&&n.call(this,{...i.computed,alignment:i.alignment},i.connectorPosition,e)||[]}getTranslate(){return this.sliced&&this.slicedTranslation||{translateX:0,translateY:0}}haloPath(t){var i=this.shapeArgs;return this.sliced||!this.visible?[]:this.series.chart.renderer.symbols.arc(i.x,i.y,i.r+t,i.r+t,{innerR:i.r-1,start:i.start,end:i.end,borderRadius:i.borderRadius})}init(){super.init.apply(this,arguments),this.name=pick(this.name,"Slice");var t=t=>{this.slice("select"===t.type)};return addEvent(this,"select",t),addEvent(this,"unselect",t),this}isValid(){return isNumber(this.y)&&0<=this.y}setVisible(i,t){const e=this.series,s=e.chart,n=e.options.ignoreHiddenPoint;t=pick(t,n),i!==this.visible&&(this.visible=this.options.visible=i=void 0===i?!this.visible:i,e.options.data[e.data.indexOf(this)]=this.options,["graphic","dataLabel","connector"].forEach(t=>{this[t]&&this[t][i?"show":"hide"](i)}),this.legendItem&&s.legend.colorizeItem(this,i),i||"hover"!==this.state||this.setState(""),n&&(e.isDirty=!0),t&&s.redraw())}slice(t,i,e){const s=this.series,n=s.chart;setAnimation(e,n),i=pick(i,!0),this.sliced=this.options.sliced=t=defined(t)?t:!this.sliced,s.options.data[s.data.indexOf(this)]=this.options,this.graphic&&this.graphic.animate(this.getTranslate())}}extend(PiePoint.prototype,{connectorShapes:{fixedOffset:function(t,i,e){var s=i.breakAt,i=i.touchingSliceAt,e=e.softConnector?["C",t.x+("left"===t.alignment?-5:5),t.y,2*s.x-i.x,2*s.y-i.y,s.x,s.y]:["L",s.x,s.y];return[["M",t.x,t.y],e,["L",i.x,i.y]]},straight:function(t,i){i=i.touchingSliceAt;return[["M",t.x,t.y],["L",i.x,i.y]]},crookedLine:function(t,i,e){var{breakAt:i,touchingSliceAt:s}=i,n=this["series"],[o,r,a]=n.center,a=a/2,{plotLeft:n,plotWidth:h}=n.chart,c="left"===t.alignment,{x:t,y:l}=t;let d=i.x;d=e.crookDistance?(e=relativeLength(e.crookDistance,1),c?o+a+(h+n-o-a)*(1-e):n+(o-a)*e):o+(r-l)*Math.tan((this.angle||0)-Math.PI/2);const p=[["M",t,l]];return(c?d<=t&&d>=i.x:d>=t&&d<=i.x)&&p.push(["L",d,l]),p.push(["L",i.x,i.y],["L",s.x,s.y]),p}}});export default PiePoint;
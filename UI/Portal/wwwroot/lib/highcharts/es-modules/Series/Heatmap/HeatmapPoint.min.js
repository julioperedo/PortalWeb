"use strict";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{prototype:{pointClass:ScatterPoint}}=SeriesRegistry.seriesTypes["scatter"];import U from"../../Core/Utilities.js";const{clamp,defined,extend,pick}=U;class HeatmapPoint extends ScatterPoint{constructor(){super(...arguments),this.options=void 0,this.series=void 0,this.value=void 0,this.x=void 0,this.y=void 0}applyOptions(t,e){return!this.isNull&&null!==this.value||delete this.color,super.applyOptions(t,e),this.formatPrefix=this.isNull||null===this.value?"null":"point",this}getCellAttributes(){const t=this,e=t.series,i=e.options,s=(i.colsize||1)/2,r=(i.rowsize||1)/2,o=e.xAxis,n=e.yAxis,a=t.options.marker||e.options.marker,l=e.pointPlacementToXValue(),p=pick(t.pointPadding,i.pointPadding,0),h={x1:clamp(Math.round(o.len-o.translate(t.x-s,!1,!0,!1,!0,-l)),-o.len,2*o.len),x2:clamp(Math.round(o.len-o.translate(t.x+s,!1,!0,!1,!0,-l)),-o.len,2*o.len),y1:clamp(Math.round(n.translate(t.y-r,!1,!0,!1,!0)),-n.len,2*n.len),y2:clamp(Math.round(n.translate(t.y+r,!1,!0,!1,!0)),-n.len,2*n.len)};for(const y of[["width","x"],["height","y"]]){var d=y[0],u=y[1];let t=u+"1",e=u+"2";var c=Math.abs(h[t]-h[e]),m=a&&a.lineWidth||0,v=Math.abs(h[t]+h[e])/2,d=a&&a[d];defined(d)&&d<c&&(c=d/2+m/2,h[t]=v-c,h[e]=v+c),p&&(("x"===u&&o.reversed||"y"===u&&!n.reversed)&&(t=e,e=u+"1"),h[t]+=p,h[e]-=p)}return h}haloPath(t){if(!t)return[];var{x:e=0,y:i=0,width:s=0,height:r=0}=this.shapeArgs||{};return[["M",e-t,i-t],["L",e-t,i+r+t],["L",e+s+t,i+r+t],["L",e+s+t,i-t],["Z"]]}isValid(){return this.value!==1/0&&this.value!==-1/0}}extend(HeatmapPoint.prototype,{dataLabelOnNull:!0,moveToTopOnHover:!0,ttBelow:!1});export default HeatmapPoint;
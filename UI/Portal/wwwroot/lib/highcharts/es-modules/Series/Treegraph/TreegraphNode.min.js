"use strict";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{treemap:{prototype:{NodeClass:TreemapNode}}}=SeriesRegistry["seriesTypes"];class TreegraphNode extends TreemapNode{constructor(){super(...arguments),this.mod=0,this.shift=0,this.change=0,this.children=[],this.preX=0,this.hidden=!1,this.wasVisited=!1,this.collapsed=!1}nextLeft(){return this.getLeftMostChild()||this.thread}nextRight(){return this.getRightMostChild()||this.thread}getAncestor(e,t){return e.ancestor.children[0]===this.children[0]?e.ancestor:t}getLeftMostSibling(){var e=this.getParent();if(e)for(const t of e.children)if(t&&t.point.visible)return t}hasChildren(){var t=this.children;for(let e=0;e<t.length;e++)if(t[e].point.visible)return!0;return!1}getLeftSibling(){var e=this.getParent();if(e){var t=e.children;for(let e=this.relativeXPosition-1;0<=e;e--)if(t[e]&&t[e].point.visible)return t[e]}}getLeftMostChild(){var t=this.children;for(let e=0;e<t.length;e++)if(t[e].point.visible)return t[e]}getRightMostChild(){var t=this.children;for(let e=t.length-1;0<=e;e--)if(t[e].point.visible)return t[e]}getParent(){return this.parentNode}getFirstChild(){var t=this.children;for(let e=0;e<t.length;e++)if(t[e].point.visible)return t[e]}}export default TreegraphNode;
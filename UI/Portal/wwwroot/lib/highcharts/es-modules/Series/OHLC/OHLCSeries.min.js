"use strict";import OHLCPoint from"./OHLCPoint.js";import OHLCSeriesDefaults from"./OHLCSeriesDefaults.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{hlc:HLCSeries}=SeriesRegistry["seriesTypes"];import U from"../../Core/Utilities.js";const{addEvent,extend,merge}=U,composedMembers=[];function onSeriesAfterSetOptions(e){const t=e.options,o=t.dataGrouping;o&&t.useOhlcData&&"highcharts-navigator-series"!==t.id&&(o.approximation="ohlc")}function onSeriesInit(e){e=e.options;e.useOhlcData&&"highcharts-navigator-series"!==e.id&&extend(this,{pointValKey:OHLCSeries.prototype.pointValKey,pointArrayMap:OHLCSeries.prototype.pointArrayMap,toYData:OHLCSeries.prototype.toYData})}class OHLCSeries extends HLCSeries{constructor(){super(...arguments),this.data=void 0,this.options=void 0,this.points=void 0}static compose(e){U.pushUnique(composedMembers,e)&&(addEvent(e,"afterSetOptions",onSeriesAfterSetOptions),addEvent(e,"init",onSeriesInit))}getPointPath(e,t){const o=super.getPointPath(e,t),s=t.strokeWidth(),i=s%2/2,r=Math.round(e.plotX)-i,n=Math.round(e.shapeArgs.width/2);e.plotOpen;return null!==e.open&&(t=Math.round(e.plotOpen)+i,o.push(["M",r,t],["L",r-n,t]),super.extendStem(o,s/2,t)),o}pointAttribs(e,t){const o=super.pointAttribs.call(this,e,t),s=this.options;return delete o.fill,!e.options.color&&s.upColor&&e.open<e.close&&(o.stroke=s.upColor),o}toYData(e){return[e.open,e.high,e.low,e.close]}}OHLCSeries.defaultOptions=merge(HLCSeries.defaultOptions,OHLCSeriesDefaults),extend(OHLCSeries.prototype,{pointClass:OHLCPoint,pointArrayMap:["open","high","low","close"]}),SeriesRegistry.registerSeriesType("ohlc",OHLCSeries);export default OHLCSeries;
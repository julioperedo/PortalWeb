"use strict";import Point from"../../Core/Series/Point.js";import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const ColumnSeries=SeriesRegistry.seriesTypes["column"];import U from"../../Core/Utilities.js";const defined=U["defined"];class SankeyPoint extends ColumnSeries.prototype.pointClass{constructor(){super(...arguments),this.className=void 0,this.fromNode=void 0,this.level=void 0,this.linkBase=void 0,this.linkColorMode=void 0,this.linksFrom=void 0,this.linksTo=void 0,this.mass=void 0,this.nodeX=void 0,this.nodeY=void 0,this.options=void 0,this.series=void 0,this.toNode=void 0}applyOptions(o,i){return Point.prototype.applyOptions.call(this,o,i),defined(this.options.level)&&(this.options.column=this.column=this.options.level),this}getClassName(){return(this.isNode?"highcharts-node ":"highcharts-link ")+Point.prototype.getClassName.call(this)}getFromNode(){var i=this;let e=-1,s;for(let o=0;o<i.linksTo.length;o++){var t=i.linksTo[o];t.fromNode.column>e&&t.fromNode!==i&&(s=t.fromNode,e=s.column)}return{fromNode:s,fromColumn:e}}setNodeColumn(){var o=this;defined(o.options.column)||(0===o.linksTo.length?o.column=0:o.column=o.getFromNode().fromColumn+1)}isValid(){return this.isNode||"number"==typeof this.weight}}export default SankeyPoint;
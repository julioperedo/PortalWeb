"use strict";import DPU from"../DrawPointUtilities.js";import H from"../../Core/Globals.js";const noop=H["noop"];import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const ColumnSeries=SeriesRegistry.seriesTypes["column"];import U from"../../Core/Utilities.js";const{extend,isArray,isNumber,isObject,merge}=U;import WordcloudPoint from"./WordcloudPoint.js";import WordcloudSeriesDefaults from"./WordcloudSeriesDefaults.js";import WU from"./WordcloudUtils.js";const{archimedeanSpiral,extendPlayingField,getBoundingBoxFromPolygon,getPlayingField,getPolygon,getRandomPosition,getRotation,getScale,getSpiral,intersectionTesting,isPolygonsColliding,rectangularSpiral,rotate2DToOrigin,rotate2DToPoint,squareSpiral,updateFieldBoundaries}=WU;class WordcloudSeries extends ColumnSeries{constructor(){super(...arguments),this.data=void 0,this.options=void 0,this.points=void 0}pointAttribs(t,e){const i=H.seriesTypes.column.prototype.pointAttribs.call(this,t,e);return delete i.stroke,delete i["stroke-width"],i}deriveFontSize(t,e,i){t=isNumber(t)?t:0,e=isNumber(e)?e:1,i=isNumber(i)?i:1;return Math.floor(Math.max(i,t*e))}drawPoints(){const i=this,o=i.hasRendered,t=i.xAxis,e=i.yAxis,r=i.chart,n=i.group,s=i.options,a=s.animation,l=s.allowExtendPlayingField,d=r.renderer,g=[],p=i.placementStrategy[s.placementStrategy],c=s.rotation,u=i.points.map(function(t){return t.weight}),m=Math.max.apply(null,u),y=i.points.concat().sort((t,e)=>e.weight-t.weight);let x=d.text().add(n),h;i.group.attr({scaleX:1,scaleY:1});for(const b of y){var S=1/m*b.weight,S=i.deriveFontSize(S,s.maxFontSize,s.minFontSize),S=extend({fontSize:S+"px"},s.style),S=(x.css(S).attr({x:0,y:0,text:b.name}),x.getBBox(!0));b.dimensions={height:S.height,width:S.width}}h=getPlayingField(t.len,e.len,y);var f=getSpiral(i.spirals[s.spiral],{field:h});for(const F of y){const w=1/m*F.weight,v=i.deriveFontSize(w,s.maxFontSize,s.minFontSize),D=extend({fontSize:v+"px"},s.style),W=p(F,{data:y,field:h,placed:g,rotation:c}),A=extend(i.pointAttribs(F,F.selected&&"select"),{align:"center","alignment-baseline":"middle","dominant-baseline":"middle",x:W.x,y:W.y,text:F.name,rotation:isNumber(W.rotation)?W.rotation:void 0}),T=getPolygon(W.x,W.y,F.dimensions.width,F.dimensions.height,W.rotation),R=getBoundingBoxFromPolygon(T);let t=intersectionTesting(F,{rectangle:R,polygon:T,field:h,placed:g,spiral:f,rotation:W.rotation}),e;!t&&l&&(h=extendPlayingField(h,R),t=intersectionTesting(F,{rectangle:R,polygon:T,field:h,placed:g,spiral:f,rotation:W.rotation})),isObject(t)?(A.x=(A.x||0)+t.x,A.y=(A.y||0)+t.y,R.left+=t.x,R.right+=t.x,R.top+=t.y,R.bottom+=t.y,h=updateFieldBoundaries(h,R),g.push(F),F.isNull=!1,F.isInside=!0):F.isNull=!0,a&&(e={x:A.x,y:A.y},o?(delete A.x,delete A.y):(A.x=0,A.y=0)),DPU.draw(F,{animatableAttribs:e,attribs:A,css:D,group:n,renderer:d,shapeArgs:void 0,shapeType:"text"})}x=x.destroy();var P=getScale(t.len,e.len,h);i.group.attr({scaleX:P,scaleY:P})}hasData(){var t=this;return isObject(t)&&!0===t.visible&&isArray(t.points)&&0<t.points.length}getPlotBox(){var t=this,e=t.chart,i=e.inverted,o=t[i?"yAxis":"xAxis"],t=t[i?"xAxis":"yAxis"],i=o?o.len:e.plotWidth,r=t?t.len:e.plotHeight;return{translateX:(o?o.left:e.plotLeft)+i/2,translateY:(t?t.top:e.plotTop)+r/2,scaleX:1,scaleY:1}}}WordcloudSeries.defaultOptions=merge(ColumnSeries.defaultOptions,WordcloudSeriesDefaults),extend(WordcloudSeries.prototype,{animate:noop,animateDrilldown:noop,animateDrillupFrom:noop,isCartesian:!1,pointClass:WordcloudPoint,setClip:noop,placementStrategy:{random:function(t,e){var i=e.field,e=e.rotation;return{x:getRandomPosition(i.width)-i.width/2,y:getRandomPosition(i.height)-i.height/2,rotation:getRotation(e.orientations,t.index,e.from,e.to)}},center:function(t,e){e=e.rotation;return{x:0,y:0,rotation:getRotation(e.orientations,t.index,e.from,e.to)}}},pointArrayMap:["weight"],spirals:{archimedean:archimedeanSpiral,rectangular:rectangularSpiral,square:squareSpiral},utils:{extendPlayingField:extendPlayingField,getRotation:getRotation,isPolygonsColliding:isPolygonsColliding,rotate2DToOrigin:rotate2DToOrigin,rotate2DToPoint:rotate2DToPoint}}),SeriesRegistry.registerSeriesType("wordcloud",WordcloudSeries);export default WordcloudSeries;
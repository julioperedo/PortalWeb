"use strict";import DumbbellPoint from"./DumbbellPoint.js";import DumbbellSeriesDefaults from"./DumbbellSeriesDefaults.js";import H from"../../Core/Globals.js";const noop=H["noop"];import SeriesRegistry from"../../Core/Series/SeriesRegistry.js";const{arearange:AreaRangeSeries,column:ColumnSeries,columnrange:ColumnRangeSeries}=SeriesRegistry.seriesTypes;import SVGRenderer from"../../Core/Renderer/SVG/SVGRenderer.js";import U from"../../Core/Utilities.js";const{extend,merge,pick}=U;class DumbbellSeries extends AreaRangeSeries{constructor(){super(...arguments),this.data=void 0,this.options=void 0,this.points=void 0,this.columnMetrics=void 0}getConnectorAttribs(e){const o=this,t=o.chart,r=e.options,s=o.options,i=o.xAxis,n=o.yAxis,l=pick(s.states&&s.states.hover&&s.states.hover.connectorWidthPlus,1),p=pick(r.dashStyle,s.dashStyle),a=n.toPixels(s.threshold||0,!0),c=t.inverted?n.len-a:a;let h=pick(r.connectorWidth,s.connectorWidth),d=pick(r.connectorColor,s.connectorColor,r.color,e.zone?e.zone.color:void 0,e.color),m=pick(e.plotLow,e.plotY),u=pick(e.plotHigh,c),g;if("number"!=typeof m)return{};e.state&&(h+=l),m<0?m=0:m>=n.len&&(m=n.len),u<0?u=0:u>=n.len&&(u=n.len),(e.plotX<0||e.plotX>i.len)&&(h=0),e.graphics&&e.graphics[1]&&(g={y:e.y,zone:e.zone},e.y=e.high,e.zone=e.zone?e.getZone():void 0,d=pick(r.connectorColor,s.connectorColor,r.color,e.zone?e.zone.color:void 0,e.color),extend(e,g));const y={d:SVGRenderer.prototype.crispLine([["M",e.plotX,m],["L",e.plotX,u]],h,"ceil")};return t.styledMode||(y.stroke=d,y["stroke-width"]=h,p&&(y.dashstyle=p)),y}drawConnector(e){var o=this,t=pick(o.options.animationLimit,250),t=e.connector&&o.chart.pointCount<t?"animate":"attr";e.connector||(e.connector=o.chart.renderer.path().addClass("highcharts-lollipop-stem").attr({zIndex:-1}).add(o.group)),e.connector[t](this.getConnectorAttribs(e))}getColumnMetrics(){const e=ColumnSeries.prototype.getColumnMetrics.apply(this,arguments);return e.offset+=e.width/2,e}translate(){var e=this,o=e.chart.inverted;this.setShapeArgs.apply(e),this.translatePoint.apply(e,arguments);for(const t of e.points){const{pointWidth:r,shapeArgs:s={},tooltipPos:i}=t;t.plotX=s.x||0,s.x=t.plotX-r/2,i&&(o?i[1]=e.xAxis.len-t.plotX:i[0]=t.plotX)}e.columnMetrics.offset-=e.columnMetrics.width/2}drawPoints(){var e=this,o=e.chart,t=e.points.length,r=e.lowColor=e.options.lowColor,s=e.options.lowMarker;let i=0,n,l,p;for(this.seriesDrawPoints.apply(e,arguments);i<t;){const[a,c]=(l=e.points[i]).graphics||[];e.drawConnector(l),c&&(c.element.point=l,c.addClass("highcharts-lollipop-high")),(l.connector?.element).point=l,a&&(p=l.zone&&l.zone.color,n=pick(l.options.lowColor,s?.fillColor,r,l.options.color,p,l.color,e.color),o.styledMode||a.attr({fill:n}),a.addClass("highcharts-lollipop-low")),i++}}markerAttribs(){const e=super.markerAttribs.apply(this,arguments);return e.x=Math.floor(e.x||0),e.y=Math.floor(e.y||0),e}pointAttribs(e,o){const t=super.pointAttribs.apply(this,arguments);return"hover"===o&&delete t.fill,t}setShapeArgs(){ColumnSeries.prototype.translate.apply(this),ColumnRangeSeries.prototype.afterColumnTranslate.apply(this)}}DumbbellSeries.defaultOptions=merge(AreaRangeSeries.defaultOptions,DumbbellSeriesDefaults),extend(DumbbellSeries.prototype,{crispCol:ColumnSeries.prototype.crispCol,drawGraph:noop,drawTracker:ColumnSeries.prototype.drawTracker,pointClass:DumbbellPoint,seriesDrawPoints:AreaRangeSeries.prototype.drawPoints,trackerGroups:["group","markerGroup","dataLabelsGroup"],translatePoint:AreaRangeSeries.prototype.translate}),SeriesRegistry.registerSeriesType("dumbbell",DumbbellSeries);export default DumbbellSeries;
"use strict";import Annotation from"../Annotation.js";import MockPoint from"../MockPoint.js";import Tunnel from"./Tunnel.js";import U from"../../../Core/Utilities.js";const merge=U["merge"];function createPathDGenerator(s,r){return function(){var t,e=this.annotation;if(!e.startRetracements||!e.endRetracements)return[];const n=this.anchor(e.startRetracements[s]).absolutePosition,o=this.anchor(e.endRetracements[s]).absolutePosition,i=[["M",Math.round(n.x),Math.round(n.y)],["L",Math.round(o.x),Math.round(o.y)]];return r&&(t=this.anchor(e.endRetracements[s-1]).absolutePosition,e=this.anchor(e.startRetracements[s-1]).absolutePosition,i.push(["L",Math.round(t.x),Math.round(t.y)],["L",Math.round(e.x),Math.round(e.y)])),i}}class Fibonacci extends Tunnel{linkPoints(){super.linkPoints(),this.linkRetracementsPoints()}linkRetracementsPoints(){const o=this.points,i=o[0].y-o[3].y,s=o[1].y-o[2].y,r=o[0].x,a=o[1].x;Fibonacci.levels.forEach((t,e)=>{var n=o[0].y-i*t,t=o[1].y-s*t,e=this.options.typeOptions.reversed?Fibonacci.levels.length-e-1:e;this.startRetracements=this.startRetracements||[],this.endRetracements=this.endRetracements||[],this.linkRetracementPoint(e,r,n,this.startRetracements),this.linkRetracementPoint(e,a,t,this.endRetracements)})}linkRetracementPoint(t,e,n,o){const i=o[t],s=this.options.typeOptions;i?(i.options.x=e,i.options.y=n,i.refresh()):o[t]=new MockPoint(this.chart,this,{x:e,y:n,xAxis:s.xAxis,yAxis:s.yAxis})}addShapes(){Fibonacci.levels.forEach(function(t,e){var{backgroundColors:n,lineColor:o,lineColors:i}=this.options.typeOptions;this.initShape({type:"path",d:createPathDGenerator(e),stroke:i[e]||o},e),0<e&&this.initShape({type:"path",fill:n[e-1],strokeWidth:0,d:createPathDGenerator(e,!0)})},this)}addLabels(){Fibonacci.levels.forEach(function(t,e){const n=this.options.typeOptions,o=this.initLabel(merge(n.labels[e],{point:function(t){return MockPoint.pointToOptions(t.annotation.startRetracements[e])},text:t.toString()}));n.labels[e]=o.options},this)}}Fibonacci.levels=[0,.236,.382,.5,.618,.786,1],Fibonacci.prototype.defaultOptions=merge(Tunnel.prototype.defaultOptions,{typeOptions:{reversed:!1,height:2,backgroundColors:["rgba(130, 170, 255, 0.4)","rgba(139, 191, 216, 0.4)","rgba(150, 216, 192, 0.4)","rgba(156, 229, 161, 0.4)","rgba(162, 241, 130, 0.4)","rgba(169, 255, 101, 0.4)"],lineColor:"#999999",lineColors:[],labels:[]},labelOptions:{allowOverlap:!0,align:"right",backgroundColor:"none",borderWidth:0,crop:!1,overflow:"none",shape:"rect",style:{color:"grey"},verticalAlign:"middle",y:0}});export default Annotation.types.fibonacci=Fibonacci;
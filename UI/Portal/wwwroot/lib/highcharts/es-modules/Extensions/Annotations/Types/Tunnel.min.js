"use strict";import Annotation from"../Annotation.js";import ControlPoint from"../ControlPoint.js";import CrookedLine from"./CrookedLine.js";import MockPoint from"../MockPoint.js";import U from"../../../Core/Utilities.js";const merge=U["merge"];function getSecondCoordinate(t,o,i){return(o.y-t.y)/(o.x-t.x)*(i-t.x)+t.y}class Tunnel extends CrookedLine{getPointsOptions(){const t=CrookedLine.prototype.getPointsOptions.call(this),o=this.options.typeOptions.yAxis||0,i=this.chart.yAxis[o];var n;return t[2]=this.heightPointOptions(t[1]),t[3]=this.heightPointOptions(t[0]),i&&i.logarithmic&&(n=i.toPixels(t[2].y)-i.toPixels(t[1].y),n=i.toPixels(t[0].y)+n,t[3].y=i.toValue(n)),t}getControlPointsOptions(){return this.getPointsOptions().slice(0,2)}heightPointOptions(t){const o=merge(t),i=this.options.typeOptions;return o.y+=i.height,o}addControlPoints(){CrookedLine.prototype.addControlPoints.call(this);const t=this.options,o=t.typeOptions,i=new ControlPoint(this.chart,this,merge(t.controlPointOptions,o.heightControlPoint),2);this.controlPoints.push(i),o.heightControlPoint=i.options}addShapes(){this.addLine(),this.addBackground()}addLine(){var t=this.initShape(merge(this.options.typeOptions.line,{type:"path",points:[this.points[0],this.points[1],function(t){const o=MockPoint.pointToOptions(t.annotation.points[2]);return o.command="M",o},this.points[3]]}),0);this.options.typeOptions.line=t.options}addBackground(){var t=this.initShape(merge(this.options.typeOptions.background,{type:"path",points:this.points.slice()}),1);this.options.typeOptions.background=t.options}translateSide(t,o,i){var i=Number(i),n=0===i?3:2;this.translatePoint(t,o,i),this.translatePoint(t,o,n)}translateHeight(t){this.translatePoint(0,t,2),this.translatePoint(0,t,3),this.options.typeOptions.height=this.points[3].y-this.points[0].y,this.userOptions.typeOptions.height=this.options.typeOptions.height}}Tunnel.prototype.defaultOptions=merge(CrookedLine.prototype.defaultOptions,{typeOptions:{background:{fill:"rgba(130, 170, 255, 0.4)",strokeWidth:0},line:{strokeWidth:1},height:-2,heightControlPoint:{positioner:function(t){var o=MockPoint.pointToPixels(t.points[2]),t=MockPoint.pointToPixels(t.points[3]),i=(o.x+t.x)/2;return{x:i-(this.graphic.width||0)/2,y:getSecondCoordinate(o,t,i)-(this.graphic.height||0)/2}},events:{drag:function(t,o){o.chart.isInsidePlot(t.chartX-o.chart.plotLeft,t.chartY-o.chart.plotTop,{visiblePlotOnly:!0})&&(o.translateHeight(this.mouseMoveToTranslation(t).y),o.redraw(!1))}}}},controlPointOptions:{events:{drag:function(t,o){o.chart.isInsidePlot(t.chartX-o.chart.plotLeft,t.chartY-o.chart.plotTop,{visiblePlotOnly:!0})&&(t=this.mouseMoveToTranslation(t),o.translateSide(t.x,t.y,!!this.index),o.redraw(!1))}}}});export default Annotation.types.tunnel=Tunnel;
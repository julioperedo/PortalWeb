"use strict";import Controllable from"./Controllable.js";import ControllableDefaults from"./ControllableDefaults.js";const defaultMarkers=ControllableDefaults["defaultMarkers"];import H from"../../../Core/Globals.js";import U from"../../../Core/Utilities.js";const{addEvent,defined,extend,merge,uniqueKey}=U,composedMembers=[],markerEndSetter=createMarkerSetter("marker-end"),markerStartSetter=createMarkerSetter("marker-start"),TRACKER_FILL="rgba(192,192,192,"+(H.svg?1e-4:.002)+")";function createMarkerSetter(r){return function(t){this.attr(r,"url(#"+t+")")}}function onChartAfterGetContainer(){this.options.defs=merge(defaultMarkers,this.options.defs||{})}function svgRendererAddMarker(t,r){const e={attributes:{id:t}},a={stroke:r.color||"none",fill:r.color||"rgba(0, 0, 0, 0.75)"};e.children=r.children&&r.children.map(function(t){return merge(a,t)});r=merge(!0,{attributes:{markerWidth:20,markerHeight:20,refX:0,refY:0,orient:"auto"}},r,e);const s=this.definition(r);return s.id=t,s}class ControllablePath extends Controllable{static compose(t,r){if(U.pushUnique(composedMembers,t)&&addEvent(t,"afterGetContainer",onChartAfterGetContainer),U.pushUnique(composedMembers,r)){const e=r.prototype;e.addMarker=svgRendererAddMarker}}constructor(t,r,e){super(t,r,e,"shape"),this.type="path"}toD(){const t=this.options.d;if(t)return"function"==typeof t?t.call(this):t;const r=this.points,e=r.length,a=[];let s=e,i=r[0],o=s&&this.anchor(i).absolutePosition,n=0,d;if(o)for(a.push(["M",o.x,o.y]);++n<e&&s;)d=(i=r[n]).command||"L",o=this.anchor(i).absolutePosition,"M"===d||"L"===d?a.push([d,o.x,o.y]):"Z"===d&&a.push([d]),s=i.series.visible;return s&&this.graphic?this.chart.renderer.crispLine(a,this.graphic.strokeWidth()):null}shouldBeDrawn(){return super.shouldBeDrawn()||!!this.options.d}render(t){var r=this.options,e=this.attrsFromOptions(r);this.graphic=this.annotation.chart.renderer.path([["M",0,0]]).attr(e).add(t),r.className&&this.graphic.addClass(r.className),this.tracker=this.annotation.chart.renderer.path([["M",0,0]]).addClass("highcharts-tracker-line").attr({zIndex:2}).add(t),this.annotation.chart.styledMode||this.tracker.attr({"stroke-linejoin":"round",stroke:TRACKER_FILL,fill:TRACKER_FILL,"stroke-width":this.graphic.strokeWidth()+2*r.snap}),super.render(),extend(this.graphic,{markerStartSetter:markerStartSetter,markerEndSetter:markerEndSetter}),this.setMarkers(this)}redraw(t){var r,e;this.graphic&&(e=t?"animate":"attr",(r=this.toD())?(this.graphic[e]({d:r}),this.tracker[e]({d:r})):(this.graphic.attr({d:"M 0 "+-9e9}),this.tracker.attr({d:"M 0 "+-9e9})),this.graphic.placed=this.tracker.placed=!!r),super.redraw(t)}setMarkers(o){const n=o.options,d=o.chart,h=d.options.defs,t=n.fill,l=defined(t)&&"none"!==t?t:n.stroke;["markerStart","markerEnd"].forEach(function(t){let r=n[t],e,a,s,i;if(r){for(s in h)if((r===((e=h[s]).attributes&&e.attributes.id)||r===e.id)&&"marker"===e.tagName){a=e;break}a&&(i=o[t]=d.renderer.addMarker((n.id||uniqueKey())+"-"+r,merge(a,{color:l})),o.attr(t,i.getAttribute("id")))}})}}ControllablePath.attrsMap={dashStyle:"dashstyle",strokeWidth:"stroke-width",stroke:"stroke",fill:"fill",zIndex:"zIndex"};export default ControllablePath;
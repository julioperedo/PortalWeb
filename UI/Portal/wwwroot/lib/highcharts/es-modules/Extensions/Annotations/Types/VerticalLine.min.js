"use strict";import Annotation from"../Annotation.js";import MockPoint from"../MockPoint.js";import U from"../../../Core/Utilities.js";const{merge,pick}=U;class VerticalLine extends Annotation{static connectorFirstPoint(t){var t=t.annotation,o=t.chart,e=o.inverted,i=t.points[0],n=pick(i.series.yAxis&&i.series.yAxis.left,0),s=pick(i.series.yAxis&&i.series.yAxis.top,0),t=t.options.typeOptions.label.offset,r=MockPoint.pointToPixels(i,!0)[e?"x":"y"];return{x:i.x,xAxis:i.series.xAxis,y:r+t+(e?n-o.plotLeft:s-o.plotTop)}}static connectorSecondPoint(t){var t=t.annotation,o=t.chart,e=o.inverted,i=t.options.typeOptions,t=t.points[0],n=pick(t.series.yAxis&&t.series.yAxis.left,0),s=pick(t.series.yAxis&&t.series.yAxis.top,0),r=MockPoint.pointToPixels(t,!0)[e?"x":"y"];let p=i.yOffset;return i.label.offset<0&&(p*=-1),{x:t.x,xAxis:t.series.xAxis,y:r+p+(e?n-o.plotLeft:s-o.plotTop)}}getPointsOptions(){return[this.options.typeOptions.point]}addShapes(){const t=this.options.typeOptions,o=this.initShape(merge(t.connector,{type:"path",points:[VerticalLine.connectorFirstPoint,VerticalLine.connectorSecondPoint]}),0);t.connector=o.options,this.userOptions.typeOptions.point=t.point}addLabels(){const t=this.options.typeOptions,o=t.label;let e=0,i=o.offset,n=o.offset<0?"bottom":"top",s="center";this.chart.inverted&&(e=o.offset,i=0,n="middle",s=o.offset<0?"right":"left");var r=this.initLabel(merge(o,{verticalAlign:n,align:s,x:e,y:i}));t.label=r.options}}VerticalLine.prototype.defaultOptions=merge(Annotation.prototype.defaultOptions,{typeOptions:{yOffset:10,label:{offset:-40,point:function(t){return t.annotation.points[0]},allowOverlap:!0,backgroundColor:"none",borderWidth:0,crop:!0,overflow:"none",shape:"rect",text:"{y:.2f}"},connector:{strokeWidth:1,markerEnd:"arrow"}}});export default Annotation.types.verticalLine=VerticalLine;
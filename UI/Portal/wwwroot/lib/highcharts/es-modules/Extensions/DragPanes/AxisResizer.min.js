"use strict";import AxisResizerDefaults from"./AxisResizerDefaults.js";import H from"../../Core/Globals.js";const hasTouch=H["hasTouch"];import U from"../../Core/Utilities.js";const{addEvent,clamp,isNumber,relativeLength}=U;class AxisResizer{constructor(t){this.axis=void 0,this.controlLine=void 0,this.lastPos=void 0,this.options=void 0,this.init(t)}init(t,e){this.axis=t,this.options=t.options.resize||{},this.render(),e||this.addMouseEvents()}render(){const t=this,e=t.axis,s=e.chart,o=t.options,i=o.x||0,n=o.y,r=clamp(e.top+e.height+n,s.plotTop,s.plotTop+s.plotHeight);let a={};s.styledMode||(a={cursor:o.cursor,stroke:o.lineColor,"stroke-width":o.lineWidth,dashstyle:o.lineDashStyle}),t.lastPos=r-n,t.controlLine||(t.controlLine=s.renderer.path().addClass("highcharts-axis-resizer")),t.controlLine.add(e.axisGroup);var h=s.styledMode?t.controlLine.strokeWidth():o.lineWidth;a.d=s.renderer.crispLine([["M",e.left+i,r],["L",e.left+e.width+i,r]],h),t.controlLine.attr(a)}addMouseEvents(){const e=this,t=e.controlLine.element,s=e.axis.chart.container,o=[];var i,n,r;e.mouseMoveHandler=i=t=>e.onMouseMove(t),e.mouseUpHandler=n=t=>e.onMouseUp(t),e.mouseDownHandler=r=t=>e.onMouseDown(t),o.push(addEvent(s,"mousemove",i),addEvent(s.ownerDocument,"mouseup",n),addEvent(t,"mousedown",r)),hasTouch&&o.push(addEvent(s,"touchmove",i),addEvent(s.ownerDocument,"touchend",n),addEvent(t,"touchstart",r)),e.eventsToUnbind=o}onMouseMove(t){t.touches&&0===t.touches[0].pageX||this.grabbed&&(this.hasDragged=!0,this.updateAxes(this.axis.chart.pointer.normalize(t).chartY-this.options.y))}onMouseUp(t){this.hasDragged&&this.updateAxes(this.axis.chart.pointer.normalize(t).chartY-this.options.y),this.grabbed=this.hasDragged=this.axis.chart.activeResizer=void 0}onMouseDown(t){this.axis.chart.pointer.reset(!1,0),this.grabbed=this.axis.chart.activeResizer=!0}updateAxes(o){const i=this,n=i.axis.chart,t=i.options.controlledAxis,e=0===t.next.length?[n.yAxis.indexOf(i.axis)+1]:t.next,r=[i.axis].concat(t.prev),a=[],h=n.plotTop,d=n.plotHeight,l=h+d,c=t=>100*t/d+"%",p=(t,e,s)=>Math.round(clamp(t,e,s));let u=!1,x=(o=clamp(o,h,l))-i.lastPos;if(!(x*x<1)){let s=!0;for(const g of[r,e])for(const f of g){const M=isNumber(f)?n.yAxis[f]:s?f:n.get(f),L=M&&M.options,z={};let t,e;var v,m;L&&"navigator-y-axis"!==L.id?(e=M.top,v=Math.round(relativeLength(L.minLength||NaN,d)),m=Math.round(relativeLength(L.maxLength||NaN,d)),s?((t=p(o-e,v,m))===m&&(u=!0),o=e+t,a.push({axis:M,options:{height:c(t)}})):(x=o-i.lastPos,t=p(M.len-x,v,m),(e=M.top+x)+t>l&&(o+=m=l-t-e,e+=m),(t=e<h&&(e=h)+t>l?d:t)===v&&(u=!0),a.push({axis:M,options:{top:c(e-h),height:c(t)}})),s=!1,z.height=t):s=!1}if(!u){for(const b of a)b.axis.update(b.options,!1);n.redraw(!1)}}}destroy(){const t=this.axis;delete t.resizer,this.eventsToUnbind&&this.eventsToUnbind.forEach(t=>t()),this.controlLine.destroy();for(const e of Object.keys(this))this[e]=null}}AxisResizer.resizerOptions=AxisResizerDefaults;export default AxisResizer;
"use strict";import ApproximationRegistry from"./ApproximationRegistry.js";import U from"../../Core/Utilities.js";const{arrayMax,arrayMin,correctFloat,extend,isNumber}=U;function average(r){var i=r.length;let e=sum(r);return e=isNumber(e)&&i?correctFloat(e/i):e}function averages(){const i=[];return[].forEach.call(arguments,function(r){i.push(average(r))}),void 0===i[0]?void 0:i}function close(r){return r.length?r[r.length-1]:r.hasNulls?null:void 0}function high(r){return r.length?arrayMax(r):r.hasNulls?null:void 0}function hlc(r,i,e){if(r=ApproximationRegistry.high(r),i=ApproximationRegistry.low(i),e=ApproximationRegistry.close(e),isNumber(r)||isNumber(i)||isNumber(e))return[r,i,e]}function low(r){return r.length?arrayMin(r):r.hasNulls?null:void 0}function ohlc(r,i,e,o){if(r=ApproximationRegistry.open(r),i=ApproximationRegistry.high(i),e=ApproximationRegistry.low(e),o=ApproximationRegistry.close(o),isNumber(r)||isNumber(i)||isNumber(e)||isNumber(o))return[r,i,e,o]}function open(r){return r.length?r[0]:r.hasNulls?null:void 0}function range(r,i){return r=ApproximationRegistry.low(r),i=ApproximationRegistry.high(i),isNumber(r)||isNumber(i)?[r,i]:null===r&&null===i?null:void 0}function sum(r){let i=r.length,e;if(!i&&r.hasNulls)e=null;else if(i)for(e=0;i--;)e+=r[i];return e}const ApproximationDefaults={average:average,averages:averages,close:close,high:high,hlc:hlc,low:low,ohlc:ohlc,open:open,range:range,sum:sum};extend(ApproximationRegistry,ApproximationDefaults);export default ApproximationDefaults;
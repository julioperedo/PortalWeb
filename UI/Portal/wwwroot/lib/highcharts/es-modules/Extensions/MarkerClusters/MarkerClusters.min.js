"use strict";import A from"../../Core/Animation/AnimationUtilities.js";const animObject=A["animObject"];import D from"../../Core/Defaults.js";const defaultOptions=D["defaultOptions"];import MarkerClusterDefaults from"./MarkerClusterDefaults.js";import MarkerClusterScatter from"./MarkerClusterScatter.js";import U from"../../Core/Utilities.js";const{addEvent,defined,error,isFunction,merge,pushUnique,syncTimeout}=U,composedMembers=[];function compose(e,t,r,s){var o=s.prototype.pointClass,e=(pushUnique(composedMembers,e)&&addEvent(e,"setExtremes",onAxisSetExtremes),pushUnique(composedMembers,t)&&addEvent(t,"render",onChartRender),pushUnique(composedMembers,o)&&(addEvent(o,"drillToCluster",onPointDrillToCluster),addEvent(o,"update",onPointUpdate)),pushUnique(composedMembers,s)&&addEvent(s,"afterRender",onSeriesAfterRender),s.types)["scatter"];e&&MarkerClusterScatter.compose(r,e)}function onAxisSetExtremes(){const e=this.chart;let t=0;for(const r of e.series)r.markerClusterInfo&&(t=animObject((r.options.cluster||{}).animation).duration||0);syncTimeout(()=>{e.tooltip&&e.tooltip.destroy()},t)}function onChartRender(){for(const r of this.series||[])if(r.markerClusterInfo){var e=r.options.cluster,t=((r.markerClusterInfo||{}).pointsState||{}).oldState;if((e||{}).animation&&r.markerClusterInfo&&0===r.chart.pointer.pinchDown.length&&"pan"!==((r.xAxis||{}).eventArgs||{}).trigger&&t&&Object.keys(t).length){for(const s of r.markerClusterInfo.clusters)r.animateClusterPoint(s);for(const o of r.markerClusterInfo.noise)r.animateClusterPoint(o)}}}function onPointDrillToCluster(e){const t=e.point||e.target,r=t.series,s=r.options.cluster,o=((s||{}).events||{}).drillToCluster;isFunction(o)&&o.call(this,e)}function onPointUpdate(){if(this.dataGroup)return error("Highcharts marker-clusters module: Running `Point.update` when point belongs to clustered series is not supported.",!1,this.series.chart),!1}function onSeriesAfterRender(){var e=this,t=(e.options.cluster||{}).drillToCluster;if(e.markerClusterInfo&&e.markerClusterInfo.clusters)for(const r of e.markerClusterInfo.clusters)r.point&&r.point.graphic&&(r.point.graphic.addClass("highcharts-cluster-point"),t&&r.point&&(r.point.graphic.css({cursor:"pointer"}),r.point.dataLabel&&r.point.dataLabel.css({cursor:"pointer"})),defined(r.clusterZone)&&r.point.graphic.addClass(r.clusterZoneClassName||"highcharts-cluster-zone-"+r.clusterZone.zoneIndex))}(defaultOptions.plotOptions||{}).series=merge((defaultOptions.plotOptions||{}).series,MarkerClusterDefaults);const MarkerClusters={compose:compose};export default MarkerClusters;
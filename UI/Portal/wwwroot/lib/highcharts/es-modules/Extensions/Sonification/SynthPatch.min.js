"use strict";import U from"../../Core/Utilities.js";const{clamp,defined,pick}=U;function getPitchTrackedMultiplierVal(e,t){var s=(3.5-1.7*e)/1.8;return(.2414*e-.2414)*Math.log(t)+s}function miniRampToVolAtTime(e,t,s){e.gain.cancelScheduledValues(t),e.gain.setTargetAtTime(s,t,SynthPatch.stopRampTime/4),e.gain.setValueAtTime(s,t+SynthPatch.stopRampTime)}function scheduleGainEnvelope(i,e,a,t,o=1){const s="attack"===e,n=t.gain;n.cancelScheduledValues(a),i.length?(1<i[0].t&&i.unshift({t:0,vol:s?0:1}),i.forEach((e,t)=>{var t=i[t-1],s=t?(e.t-t.t)/1e3:0,t=a+(t?t.t/1e3+SynthPatch.stopRampTime:0);n.setTargetAtTime(e.vol*o,t,Math.max(s,SynthPatch.stopRampTime)/2)})):miniRampToVolAtTime(t,a,s?o:0)}class PulseOscNode{constructor(e,t){this.pulseWidth=Math.min(Math.max(0,t.pulseWidth||.5));var s=()=>new OscillatorNode(e,{type:"sawtooth",detune:t.detune,frequency:Math.max(1,t.frequency||350)});this.sawOscA=s(),this.sawOscB=s(),this.phaseInverter=new GainNode(e,{gain:-1}),this.masterGain=new GainNode(e),this.delayNode=new DelayNode(e,{delayTime:this.pulseWidth/this.sawOscA.frequency.value}),this.sawOscA.connect(this.masterGain),this.sawOscB.connect(this.phaseInverter),this.phaseInverter.connect(this.delayNode),this.delayNode.connect(this.masterGain)}connect(e){this.masterGain.connect(e)}getFrequencyFacade(){const i=this;return{cancelScheduledValues(e){return i.sawOscA.frequency.cancelScheduledValues(e),i.sawOscB.frequency.cancelScheduledValues(e),i.delayNode.delayTime.cancelScheduledValues(e),i.sawOscA.frequency},setValueAtTime(e,t){return this.cancelScheduledValues(t),i.sawOscA.frequency.setValueAtTime(e,t),i.sawOscB.frequency.setValueAtTime(e,t),i.delayNode.delayTime.setValueAtTime(Math.round(1e4*i.pulseWidth/e)/1e4,t),i.sawOscA.frequency},setTargetAtTime(e,t,s){return this.cancelScheduledValues(t),i.sawOscA.frequency.setTargetAtTime(e,t,s),i.sawOscB.frequency.setTargetAtTime(e,t,s),i.delayNode.delayTime.setTargetAtTime(Math.round(1e4*i.pulseWidth/e)/1e4,t,s),i.sawOscA.frequency}}}getPWMTarget(){return this.delayNode.delayTime}start(){this.sawOscA.start(),this.sawOscB.start()}stop(e){this.sawOscA.stop(e),this.sawOscB.stop(e)}}class Oscillator{constructor(e,t,s){this.audioContext=e,this.options=t,this.fmOscillatorIx=t.fmOscillator,this.vmOscillatorIx=t.vmOscillator,this.createSoundSource(),this.createGain(),this.createFilters(),this.createVolTracking(),s&&this.connect(s)}connect(e){[this.lowpassNode,this.highpassNode,this.volTrackingNode,this.vmNode,this.gainNode,this.whiteNoise,this.pulseNode,this.oscNode].reduce((e,t)=>t?(t.connect(e),t):e,e)}start(){this.oscNode&&this.oscNode.start(),this.whiteNoise&&this.whiteNoise.start(),this.pulseNode&&this.pulseNode.start()}stopAtTime(e){this.oscNode&&this.oscNode.stop(e),this.whiteNoise&&this.whiteNoise.stop(e),this.pulseNode&&this.pulseNode.stop(e)}setFreqAtTime(e,t,s=0){const i=this.options,a=clamp(pick(i.fixedFrequency,t)*(i.freqMultiplier||1),0,21e3),o=this.getOscTarget(),n=s/5e3;o&&(o.cancelScheduledValues(e),s&&.01<e-(this.lastUpdateTime||-1)?(o.setTargetAtTime(a,e,n),o.setValueAtTime(a,e+n)):o.setValueAtTime(a,e)),this.scheduleVolTrackingChange(a,e,s),this.scheduleFilterTrackingChange(a,e,s),this.lastUpdateTime=e}getFMTarget(){return this.oscNode&&this.oscNode.detune||this.whiteNoise&&this.whiteNoise.detune||this.pulseNode&&this.pulseNode.getPWMTarget()}getVMTarget(){return this.vmNode&&this.vmNode.gain}runEnvelopeAtTime(e,t){this.gainNode&&scheduleGainEnvelope(("attack"===e?this.options.attackEnvelope:this.options.releaseEnvelope)||[],e,t,this.gainNode,this.options.volume)}cancelScheduled(){this.gainNode&&this.gainNode.gain.cancelScheduledValues(this.audioContext.currentTime);const e=this.getOscTarget();e&&e.cancelScheduledValues(0),this.lowpassNode&&this.lowpassNode.frequency.cancelScheduledValues(0),this.highpassNode&&this.highpassNode.frequency.cancelScheduledValues(0),this.volTrackingNode&&this.volTrackingNode.gain.cancelScheduledValues(0)}scheduleVolTrackingChange(e,t,s){this.volTrackingNode&&(e=getPitchTrackedMultiplierVal(this.options.volumePitchTrackingMultiplier||1,e),s=s?s/1e3:SynthPatch.stopRampTime,this.volTrackingNode.gain.cancelScheduledValues(t),this.volTrackingNode.gain.setTargetAtTime(e,t,s/5),this.volTrackingNode.gain.setValueAtTime(e,t+s))}scheduleFilterTrackingChange(i,a,e){const t=this.options,o=e?e/1e3:SynthPatch.stopRampTime,s=(e,t)=>{var s=getPitchTrackedMultiplierVal(t.frequencyPitchTrackingMultiplier||1,i),t=clamp((t.frequency||1e3)*s,0,21e3);e.frequency.cancelScheduledValues(a),e.frequency.setTargetAtTime(t,a,o/5),e.frequency.setValueAtTime(t,a+o)};this.lowpassNode&&t.lowpass&&s(this.lowpassNode,t.lowpass),this.highpassNode&&t.highpass&&s(this.highpassNode,t.highpass)}createGain(){var e=this.options;(defined(e.volume)||e.attackEnvelope&&e.attackEnvelope.length||e.releaseEnvelope&&e.releaseEnvelope.length)&&(this.gainNode=new GainNode(this.audioContext,{gain:pick(e.volume,1)})),this.vmNode=new GainNode(this.audioContext)}createSoundSource(){const e=this.options,t=this.audioContext,s=(e.fixedFrequency||0)*(e.freqMultiplier||1);if("whitenoise"===e.type){const i=2*t.sampleRate,a=t.createBuffer(1,i,t.sampleRate),o=a.getChannelData(0);for(let e=0;e<i;++e)o[e]=1.2*Math.random()-.6;const n=this.whiteNoise=t.createBufferSource();n.buffer=a,n.loop=!0}else"pulse"===e.type?this.pulseNode=new PulseOscNode(t,{detune:e.detune,pulseWidth:e.pulseWidth,frequency:s}):this.oscNode=new OscillatorNode(t,{type:e.type||"sine",detune:e.detune,frequency:s})}createFilters(){var e=this.options;e.lowpass&&e.lowpass.frequency&&(this.lowpassNode=new BiquadFilterNode(this.audioContext,{type:"lowpass",Q:e.lowpass.Q||1,frequency:e.lowpass.frequency})),e.highpass&&e.highpass.frequency&&(this.highpassNode=new BiquadFilterNode(this.audioContext,{type:"highpass",Q:e.highpass.Q||1,frequency:e.highpass.frequency}))}createVolTracking(){var e=this.options;e.volumePitchTrackingMultiplier&&1!==e.volumePitchTrackingMultiplier&&(this.volTrackingNode=new GainNode(this.audioContext,{gain:1}))}getOscTarget(){return this.oscNode?this.oscNode.frequency:this.pulseNode&&this.pulseNode.getFrequencyFacade()}}class SynthPatch{constructor(t,e){this.audioContext=t,this.options=e,this.eqNodes=[],this.midiInstrument=e.midiInstrument||1,this.outputNode=new GainNode(t,{gain:0}),this.createEqChain(this.outputNode);const s=this.eqNodes.length?this.eqNodes[0]:this.outputNode;this.oscillators=(this.options.oscillators||[]).map(e=>new Oscillator(t,e,defined(e.fmOscillator)||defined(e.vmOscillator)?void 0:s)),this.oscillators.forEach(s=>{var e=(e,t)=>{t&&(t=t[e]())&&s.connect(t)};defined(s.fmOscillatorIx)&&e("getFMTarget",this.oscillators[s.fmOscillatorIx]),defined(s.vmOscillatorIx)&&e("getVMTarget",this.oscillators[s.vmOscillatorIx])})}startSilently(){this.outputNode.gain.value=0,this.oscillators.forEach(e=>e.start())}stop(){const e=this.audioContext.currentTime,t=e+SynthPatch.stopRampTime;miniRampToVolAtTime(this.outputNode,e,0),this.oscillators.forEach(e=>e.stopAtTime(t)),this.outputNode.disconnect()}silenceAtTime(e){!e&&this.outputNode.gain.value<.01?this.outputNode.gain.value=0:this.releaseAtTime((e||0)+this.audioContext.currentTime)}mute(){this.cancelScheduled(),miniRampToVolAtTime(this.outputNode,this.audioContext.currentTime,0)}playFreqAtTime(e,t,s){const i=(e||0)+this.audioContext.currentTime,a=this.options;this.oscillators.forEach(e=>{e.setFreqAtTime(i,t,a.noteGlideDuration),e.runEnvelopeAtTime("attack",i)}),scheduleGainEnvelope(a.masterAttackEnvelope||[],"attack",i,this.outputNode,a.masterVolume),s&&this.releaseAtTime(i+s/1e3)}cancelScheduled(){this.outputNode.gain.cancelScheduledValues(this.audioContext.currentTime),this.oscillators.forEach(e=>e.cancelScheduled())}connect(e){return this.outputNode.connect(e)}createEqChain(e){this.eqNodes=(this.options.eq||[]).map(e=>new BiquadFilterNode(this.audioContext,{type:"peaking",...e})),this.eqNodes.reduceRight((e,t)=>(t.connect(e),t),e)}releaseAtTime(s){let i=0;this.oscillators.forEach(e=>{var t=e.options.releaseEnvelope;t&&t.length&&(i=Math.max(i,t[t.length-1].t),e.runEnvelopeAtTime("release",s))});var e=this.options.masterReleaseEnvelope||[];e.length&&(scheduleGainEnvelope(e,"release",s,this.outputNode,this.options.masterVolume),i=Math.max(i,e[e.length-1].t)),miniRampToVolAtTime(this.outputNode,s+i/1e3,0)}}SynthPatch.stopRampTime=.012;export default SynthPatch;
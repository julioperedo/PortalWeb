"use strict";import AccessibilityComponent from"../../AccessibilityComponent.js";import ChartUtilities from"../../Utils/ChartUtilities.js";const hideSeriesFromAT=ChartUtilities["hideSeriesFromAT"];import ForcedMarkers from"./ForcedMarkers.js";import NewDataAnnouncer from"./NewDataAnnouncer.js";import SeriesDescriber from"./SeriesDescriber.js";const describeSeries=SeriesDescriber["describeSeries"];import SeriesKeyboardNavigation from"./SeriesKeyboardNavigation.js";class SeriesComponent extends AccessibilityComponent{static compose(e,i,t){NewDataAnnouncer.compose(t),ForcedMarkers.compose(t),SeriesKeyboardNavigation.compose(e,i,t)}init(){this.newDataAnnouncer=new NewDataAnnouncer(this.chart),this.newDataAnnouncer.init(),this.keyboardNavigation=new SeriesKeyboardNavigation(this.chart,this.keyCodes),this.keyboardNavigation.init(),this.hideTooltipFromATWhenShown(),this.hideSeriesLabelsFromATWhenShown()}hideTooltipFromATWhenShown(){const e=this;this.chart.tooltip&&this.addEvent(this.chart.tooltip.constructor,"refresh",function(){this.chart===e.chart&&this.label&&this.label.element&&this.label.element.setAttribute("aria-hidden",!0)})}hideSeriesLabelsFromATWhenShown(){this.addEvent(this.chart,"afterDrawSeriesLabels",function(){this.series.forEach(function(e){e.labelBySeries&&e.labelBySeries.attr("aria-hidden",!0)})})}onChartRender(){const e=this.chart;e.series.forEach(function(e){(!1!==(e.options.accessibility&&e.options.accessibility.enabled)&&e.visible?describeSeries:hideSeriesFromAT)(e)})}getKeyboardNavigation(){return this.keyboardNavigation.getKeyboardNavigationHandler()}destroy(){this.newDataAnnouncer.destroy(),this.keyboardNavigation.destroy()}}export default SeriesComponent;
"use strict";import Geometry from"./GeometryUtilities.js";const{getAngleBetweenPoints,getCenterOfPoints,getDistanceBetweenPoints}=Geometry;var CircleUtilities;!function(e){function l(e,t){t=Math.pow(10,t);return Math.round(e*t)/t}function s(e){if(e<=0)throw new Error("radius of circle must be a positive number.");return Math.PI*e*e}function c(e,t){return e*e*Math.acos(1-t/e)-(e-t)*Math.sqrt(t*(2*e-t))}function o(e,t){var n,r,i,s=getDistanceBetweenPoints(e,t),c=e.r,o=t.r;let u=[];return s<c+o&&s>Math.abs(c-o)&&(o=((c=c*c)-o*o+s*s)/(2*s),c=Math.sqrt(c-o*o),i=(n=e.x)+o*((r=t.x)-n)/s,t=(e=e.y)+o*((o=t.y)-e)/s,o=c/s*-(o-e),e=c/s*-(r-n),u=[{x:l(i+o,14),y:l(t-e,14)},{x:l(i-o,14),y:l(t+e,14)}]),u}function n(e){return e.reduce((e,s,c,t)=>{t=t.slice(c+1).reduce((e,t,n,r)=>{const i=[c,n+c+1];return e.concat(o(s,t).map(e=>(e.indexes=i,e)))},[]);return e.concat(t)},[])}function r(e,t){return getDistanceBetweenPoints(e,t)<=t.r+1e-10}function i(t,e){return!e.some(function(e){return!r(t,e)})}function a(t){return n(t).filter(function(e){return i(e,t)})}e.round=l,e.getAreaOfCircle=s,e.getCircularSegmentArea=c,e.getOverlapBetweenCircles=function(e,t,n){let r=0;var i;return r=n<e+t?l(r=n<=Math.abs(t-e)?s(e<t?e:t):(i=n-(n=(e*e-t*t+n*n)/(2*n)),c(e,e-n)+c(t,t-i)),14):r},e.getCircleCircleIntersection=o,e.getCirclesIntersectionPoints=n,e.isCircle1CompletelyOverlappingCircle2=function(e,t){return getDistanceBetweenPoints(e,t)+t.r<e.r+1e-10},e.isPointInsideCircle=r,e.isPointInsideAllCircles=i,e.isPointOutsideAllCircles=function(t,e){return!e.some(function(e){return r(t,e)})},e.getCirclesIntersectionPolygon=a,e.getAreaOfIntersectionBetweenCircles=function(u){let e=a(u),t;if(1<e.length){const r=getCenterOfPoints(e);var n=(e=e.map(function(e){return e.angle=getAngleBetweenPoints(r,e),e}).sort(function(e,t){return t.angle-e.angle}))[e.length-1];const i=e.reduce(function(e,s){const c=e["startPoint"],o=getCenterOfPoints([c,s]);var t,n=s.indexes.filter(function(e){return-1<c.indexes.indexOf(e)}).reduce(function(e,t){var t=u[t],n=getAngleBetweenPoints(t,s),r=getAngleBetweenPoints(t,c),r=r-(r-n+(r<n?2*Math.PI:0))/2;let i=getDistanceBetweenPoints(o,{x:t.x+t.r*Math.sin(r),y:t.y+t.r*Math.cos(r)});n=t.r;return i>2*n&&(i=2*n),e=!e||e.width>i?{r:n,largeArc:i>n?1:0,width:i,x:s.x,y:s.y}:e},null);return n&&(t=n["r"],e.arcs.push(["A",t,t,0,n.largeArc,1,n.x,n.y]),e.startPoint=s),e},{startPoint:n,arcs:[]}).arcs;0!==i.length&&1!==i.length&&(i.unshift(["M",n.x,n.y]),t={center:r,d:i})}return t}}(CircleUtilities=CircleUtilities||{});export default CircleUtilities;
"use strict";import U from"../../Utilities.js";const{defined,isNumber,pick}=U;function arc(e,t,n,r,i){const L=[];if(i){var a=i.start||0,o=pick(i.r,n),r=pick(i.r,r||n),n=.001,s=Math.abs((i.end||0)-a-2*Math.PI)<n,l=(i.end||0)-n,u=i.innerR,s=pick(i.open,s),d=Math.cos(a),p=Math.sin(a),M=Math.cos(l),h=Math.sin(l),n=pick(i.longArc,l-a-Math.PI<n?0:1);let c=["A",o,r,0,n,pick(i.clockwise,1),e+o*M,t+r*h];c.params={start:a,end:l,cx:e,cy:t},L.push(["M",e+o*d,t+r*p],c),defined(u)&&((c=["A",u,u,0,n,defined(i.clockwise)?1-i.clockwise:0,e+u*d,t+u*p]).params={start:l,end:a,cx:e,cy:t},L.push(s?["M",e+u*M,t+u*h]:["L",e+u*M,t+u*h],c)),s||L.push(["Z"])}return L}function callout(c,e,t,n,r){var i,L=Math.min(r&&r.r||0,t,n),a=L+6,o=r&&r.anchorX,r=r&&r.anchorY||0;const s=roundedRect(c,e,t,n,{r:L});return isNumber(o)&&(o<t&&0<o&&r<n&&0<r||(t-a<c+o?e+a<r&&r<e+n-a?s.splice(3,1,["L",c+t,r-6],["L",c+t+6,r],["L",c+t,r+6],["L",c+t,e+n-L]):o<t?(i=r<e+a,s.splice(i?2:5,0,["L",o,r],["L",c+t-L,i?e:e+n])):s.splice(3,1,["L",c+t,n/2],["L",o,r],["L",c+t,n/2],["L",c+t,e+n-L]):c+o<a?e+a<r&&r<e+n-a?s.splice(7,1,["L",c,r+6],["L",c-6,r],["L",c,r-6],["L",c,e+L]):0<o?(i=r<e+a,s.splice(i?1:6,0,["L",o,r],["L",c+L,i?e:e+n])):s.splice(7,1,["L",c,n/2],["L",o,r],["L",c,n/2],["L",c,e+L]):n<r&&o<t-a?s.splice(5,1,["L",o+6,e+n],["L",o,e+n+6],["L",o-6,e+n],["L",c+L,e+n]):r<0&&a<o&&s.splice(1,1,["L",o-6,e],["L",o,e-6],["L",o+6,e],["L",t-L,e]))),s}function circle(c,e,t,n){return arc(c+t/2,e+n/2,t/2,n/2,{start:.5*Math.PI,end:2.5*Math.PI,open:!1})}function diamond(c,e,t,n){return[["M",c+t/2,e],["L",c+t,e+n/2],["L",c+t/2,e+n],["L",c,e+n/2],["Z"]]}function rect(c,e,t,n,r){return r&&r.r?roundedRect(c,e,t,n,r):[["M",c,e],["L",c+t,e],["L",c+t,e+n],["L",c,e+n],["Z"]]}function roundedRect(c,e,t,n,r){r=r?.r||0;return[["M",c+r,e],["L",c+t-r,e],["A",r,r,0,0,1,c+t,e+r],["L",c+t,e+n-r],["A",r,r,0,0,1,c+t-r,e+n],["L",c+r,e+n],["A",r,r,0,0,1,c,e+n-r],["L",c,e+r],["A",r,r,0,0,1,c+r,e],["Z"]]}function triangle(c,e,t,n){return[["M",c+t/2,e],["L",c+t,e+n],["L",c,e+n],["Z"]]}function triangleDown(c,e,t,n){return[["M",c,e],["L",c+t,e],["L",c+t/2,e+n],["Z"]]}const Symbols={arc:arc,callout:callout,circle:circle,diamond:diamond,rect:rect,roundedRect:roundedRect,square:rect,triangle:triangle,"triangle-down":triangleDown};export default Symbols;
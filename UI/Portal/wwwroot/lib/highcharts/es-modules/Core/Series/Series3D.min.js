"use strict";import Math3D from"../Math3D.js";const perspective=Math3D["perspective"];import Series from"../Series/Series.js";import U from"../Utilities.js";const{addEvent,extend,merge,pick,pushUnique,isNumber}=U,composedMembers=[];class Series3D extends Series{static compose(t){pushUnique(composedMembers,t)&&(addEvent(t,"afterTranslate",function(){this.chart.is3d()&&this.translate3dPoints()}),extend(t.prototype,{translate3dPoints:Series3D.prototype.translate3dPoints}))}translate3dPoints(){const t=this,e=t.options,s=t.chart,i=pick(t.zAxis,s.options.zAxis[0]),o=[],a=[],p=e.stacking?isNumber(e.stack)?e.stack:0:t.index||0;let r,n,l,d;for(t.zPadding=p*(e.depth||0+(e.groupZPadding||1)),d=0;d<t.data.length;d++)r=t.data[d],i&&i.translate?(l=i.logarithmic&&i.val2lin?i.val2lin(r.z):r.z,r.plotZ=i.translate(l),r.isInside=!!r.isInside&&(l>=i.min&&l<=i.max)):r.plotZ=t.zPadding,r.axisXpos=r.plotX,r.axisYpos=r.plotY,r.axisZpos=r.plotZ,o.push({x:r.plotX,y:r.plotY,z:r.plotZ}),a.push(r.plotX||0);t.rawPointsX=a;var c=perspective(o,s,!0);for(d=0;d<t.data.length;d++)r=t.data[d],n=c[d],r.plotX=n.x,r.plotY=n.y,r.plotZ=n.z}}Series3D.defaultOptions=merge(Series.defaultOptions);export default Series3D;
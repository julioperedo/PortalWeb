"use strict";import DataConnector from"./Connectors/DataConnector.js";import DataPoolDefaults from"./DataPoolDefaults.js";import U from"../Core/Utilities.js";class DataPool{constructor(t=DataPoolDefaults){t.connectors=t.connectors||[],this.connectors={},this.options=t,this.waiting={}}emit(t){U.fireEvent(this,t.type,t)}getConnector(t){var o=this.connectors[t];if(o)return Promise.resolve(o);let n=this.waiting[t];if(!n){n=this.waiting[t]=[];o=this.getConnectorOptions(t);if(!o)throw new Error(`Connector not found. (${t})`);this.loadConnector(o).then(e=>{delete this.waiting[t];for(let t=0,o=n.length;t<o;++t)n[t][0](e)}).catch(e=>{delete this.waiting[t];for(let t=0,o=n.length;t<o;++t)n[t][1](e)})}return new Promise((t,o)=>{n.push([t,o])})}getConnectorIds(){const e=this.options.connectors,n=[];for(let t=0,o=e.length;t<o;++t)n.push(e[t].id);return n}getConnectorOptions(e){var n=this.options.connectors;for(let t=0,o=n.length;t<o;++t)if(n[t].id===e)return n[t]}getConnectorTable(t){return this.getConnector(t).then(t=>t.table)}loadConnector(i){return new Promise((o,t)=>{this.emit({type:"load",options:i});const e=DataConnector.types[i.type];if(!e)throw new Error(`Connector type not found. (${i.type})`);const n=new e(i.options);n.load().then(t=>{this.connectors[i.id]=t,this.emit({type:"afterLoad",options:i}),o(t)}).catch(t)})}on(t,o){return U.addEvent(this,t,o)}setConnectorOptions(e){const n=this.options.connectors;this.emit({type:"setConnectorOptions",options:e});for(let t=0,o=n.length;t<o;++t)if(n[t].id===e.id){n.splice(t,1);break}n.push(e),this.emit({type:"afterSetConnectorOptions",options:e})}}DataPool.version="1.0.0";export default DataPool;
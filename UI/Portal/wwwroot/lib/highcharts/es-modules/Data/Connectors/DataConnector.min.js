"use strict";import DataModifier from"../Modifiers/DataModifier.js";import DataTable from"../DataTable.js";import U from"../../Core/Utilities.js";const{addEvent,fireEvent,merge,pick}=U;class DataConnector{constructor(t={}){this.table=new DataTable(t.dataTable),this.metadata=t.metadata||{columns:{}}}get polling(){return!!this.polling}describeColumn(t,e){const r=this.metadata.columns;r[t]=merge(r[t]||{},e)}describeColumns(t){const e=Object.keys(t);for(var r;"string"==typeof(r=e.pop());)this.describeColumn(r,t[r])}emit(t){fireEvent(this,t.type,t)}getColumnOrder(t){const r=this.metadata.columns,e=Object.keys(r||{});if(e.length)return e.sort((t,e)=>pick(r[t].index,0)-pick(r[e].index,0))}getSortedColumns(t){return this.table.getColumns(this.getColumnOrder(t))}load(){return fireEvent(this,"afterLoad",{table:this.table}),Promise.resolve(this)}on(t,e){return addEvent(this,t,e)}save(){return fireEvent(this,"saveError",{table:this.table}),Promise.reject(new Error("Not implemented"))}setColumnOrder(r){for(let t=0,e=r.length;t<e;++t)this.describeColumn(r[t],{index:t})}setModifierOptions(t){const e=t&&DataModifier.types[t.type];return this.table.setModifier(e?new e(t):void 0).then(()=>this)}startPolling(t=1e3){const e=this;window.clearTimeout(e._polling),e._polling=window.setTimeout(()=>e.load().catch(t=>e.emit({type:"loadError",error:t,table:e.table})).then(()=>{e._polling&&e.startPolling(t)}),t)}stopPolling(){window.clearTimeout(this._polling),delete this._polling}whatIs(t){return this.metadata.columns[t]}}!function(r){r.types={},r.registerType=function(t,e){return!!t&&!r.types[t]&&!!(r.types[t]=e)}}(DataConnector=DataConnector||{});export default DataConnector;
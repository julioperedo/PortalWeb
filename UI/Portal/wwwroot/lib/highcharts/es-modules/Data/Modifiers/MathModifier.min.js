"use strict";import DataModifier from"./DataModifier.js";import FormulaParser from"../Formula/FormulaParser.js";import FormulaProcessor from"../Formula/FormulaProcessor.js";class MathModifier extends DataModifier{constructor(o){super(),this.options={...MathModifier.defaultOptions,...o}}modifyTable(a,o){var s=this;s.emit({type:"modify",detail:o,table:a});const l=s.options.alternativeSeparators,e=s.options.formulaColumns||a.getColumnNames(),i=a.modified;for(let o=0,r=e.length,t;o<r;++o)t=e[o],0<=e.indexOf(t)&&i.setColumn(t,s.processColumn(a,t));var m=s.options.columnFormulas||[];for(let o=0,r=m.length,t,e;o<r;++o)t=m[o],e=FormulaParser.parseFormula(t.formula,l),i.setColumn(t.column,s.processColumnFormula(e,a,t.rowStart,t.rowEnd));return s.emit({type:"afterModify",detail:o,table:a}),a}processColumn(a,o,r=0){const s=this.options.alternativeSeparators,l=(a.getColumn(o,!0)||[]).slice(0<r?r:0);for(let o=0,r=l.length,t=[],e;o<r;++o)if("string"==typeof(e=l[o])&&"="===e[0])try{t=""===e?t:FormulaParser.parseFormula(e.substring(1),s),l[o]=FormulaProcessor.processFormula(t,a)}catch{l[o]=NaN}return l}processColumnFormula(t,o,e=0,a=o.getRowCount()){e=0<=e?e:0,a=0<=a?a:o.getRowCount()+a;const s=[],l=o.modified;for(let o=0,r=a-e;o<r;++o)try{s[o]=FormulaProcessor.processFormula(t,l)}catch{s[o]=NaN}finally{t=FormulaProcessor.translateReferences(t,0,1)}return s}}MathModifier.defaultOptions={type:"Math",alternativeSeparators:!1},DataModifier.registerType("Math",MathModifier);export default MathModifier;
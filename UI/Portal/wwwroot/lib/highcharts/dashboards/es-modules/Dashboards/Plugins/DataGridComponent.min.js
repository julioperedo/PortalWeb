"use strict";import Component from"../Components/Component.js";import DataConverter from"../../Data/Converters/DataConverter.js";import DataGridSyncHandlers from"./DataGridSyncHandlers.js";import U from"../../Core/Utilities.js";const{diffObjects,merge,uniqueKey}=U;class DataGridComponent extends Component{static onUpdate(e,t){const n=e.target;if(n){var e=n.closest(".highcharts-datagrid-row"),i=n.closest(".highcharts-datagrid-cell");const a=new DataConverter;if(e&&e instanceof HTMLElement&&i&&i instanceof HTMLElement){e=e.dataset.rowIndex,i=i.dataset["columnName"];if(void 0!==e&&void 0!==i){const o=t.table;if(o){let t=a.asGuessedType(n.value);t instanceof Date&&(t=t.toString()),o.setCell(i,parseInt(e,10),t)}}}}}static fromJSON(t,e){var n=t.options,i=JSON.parse(t.options.dataGridOptions||"");const a=new DataGridComponent(e,merge(n,{dataGridOptions:i,syncHandlers:DataGridComponent.syncHandlers}));return a.emit({type:"fromJSON",json:t}),a}constructor(t,e){super(t,e=merge(DataGridComponent.defaultOptions,e)),this.connectorListeners=[],this.options=e,this.type="DataGrid",this.options.dataGridClassName&&this.contentElement.classList.add(this.options.dataGridClassName),this.options.dataGridID&&(this.contentElement.id=this.options.dataGridID),this.sync=new DataGridComponent.Sync(this,this.syncHandlers),this.dataGridOptions=this.options.dataGridOptions||{},this.innerResizeTimeouts=[],this.on("afterSetConnector",t=>{this.disableEditingModifiedColumns(t.connector)})}onTableChanged(){this.dataGrid&&!this.dataGrid?.cellInputEl&&this.dataGrid.update({dataTable:this.filterColumns()})}disableEditingModifiedColumns(t){t=this.getColumnOptions(t);this.dataGrid?.update({columns:t})}getColumnOptions(t){t=t.options.dataModifier;if(!t||"Math"!==t.type)return{};var n=t.columnFormulas;if(!n)return{};const i={};for(let t=0,e=n.length;t<e;++t){var a=n[t].column;i[a]={editable:!1}}return i}async load(){if(this.emit({type:"load"}),await super.load(),this.connector&&!this.connectorListeners.length){const t=this.connectorListeners;t.push(this.connector.on("afterLoad",t=>{t.table&&this.connector&&this.connector.table.setColumns(t.table.getColumns())})),t.push(this.connector.table.on("afterSetCell",n=>{var e=this.dataGrid;let i=!0;if(e){e=e.rowElements[n.rowIndex];let t=[];(t=e?Array.prototype.slice.call(e.childNodes):t).forEach(t=>{var e;0<t.childElementCount&&(e=t.childNodes[0],e="string"==typeof n.cellValue?e.value:+e.value,t.dataset.columnName===n.columnName&&e===n.cellValue&&(i=!1))})}i&&this.update({})}))}return this.emit({type:"afterLoad"}),this}render(){return super.render(),this.dataGrid||(this.dataGrid=this.constructDataGrid()),this.connector&&this.dataGrid&&this.dataGrid.dataTable.modified!==this.connector.table.modified&&this.dataGrid.update({dataTable:this.filterColumns()}),this.sync.start(),this.emit({type:"afterRender"}),this.setupConnectorUpdate(),this}resize(t,e){this.dataGrid&&super.resize(t,e)}async update(t){if(t.connector?.id!==this.connectorId){const n=this.connectorListeners;for(let t=0,e=n.length;t<e;++t)n[t]();n.length=0}await super.update(t),this.dataGrid&&(this.filterAndAssignSyncOptions(DataGridSyncHandlers),this.dataGrid.update(this.options.dataGridOptions||{})),this.emit({type:"afterUpdate"})}constructDataGrid(){var t;if(DataGridComponent.DataGridConstructor)return t=this.connector?this.getColumnOptions(this.connector):{},this.dataGrid=new DataGridComponent.DataGridConstructor(this.contentElement,{...this.options.dataGridOptions,dataTable:this.options.dataGridOptions?.dataTable||this.filterColumns(),columns:merge(t,this.options.dataGridOptions?.columns)}),this.dataGrid;throw new Error("DataGrid not connected.")}setupConnectorUpdate(){const{connector:e,dataGrid:t}=this;e&&t&&t.on("cellClick",t=>{"input"in t&&t.input.addEventListener("keyup",t=>this.options.onUpdate(t,e))})}filterColumns(){const t=this.connector?.table.modified,e=this.options.visibleColumns;if(t){if(!e?.length)return t;var n=t.getColumnNames().filter(t=>0<e?.length&&!e.includes(t));const i=t.clone();return i.deleteColumns(n),i}}toJSON(){var t=JSON.stringify(this.options.dataGridOptions),e=super.toJSON(),e={...e,options:{...e.options,dataGridOptions:t}};return this.emit({type:"toJSON",json:e}),e}getOptions(){return{...diffObjects(this.options,DataGridComponent.defaultOptions),type:"DataGrid"}}destroy(){this.dataGrid?.containerResizeObserver.disconnect(),super.destroy()}}DataGridComponent.syncHandlers=DataGridSyncHandlers,DataGridComponent.defaultOptions=merge(Component.defaultOptions,{dataGridClassName:"dataGrid-container",dataGridID:"dataGrid-"+uniqueKey(),dataGridOptions:{},editableOptions:[{name:"connectorName",propertyPath:["connector","id"],type:"select"}],syncHandlers:DataGridSyncHandlers,onUpdate:DataGridComponent.onUpdate});export default DataGridComponent;
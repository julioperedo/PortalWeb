"use strict";import AST from"../../Core/Renderer/HTML/AST.js";import Component from"./Component.js";import U from"../../Core/Utilities.js";const{merge,diffObjects}=U;AST.allowedTags=[...AST.allowedTags,"option","select","label","input","textarea"],AST.allowedAttributes=[...AST.allowedAttributes,"for","value","checked","src","name","selected"],AST.allowedReferences=[...AST.allowedReferences,"data:image/"];class HTMLComponent extends Component{static fromJSON(e,t){var n=e.options,s=e.elements?e.elements.map(e=>JSON.parse(e)):[];const o=new HTMLComponent(t,merge(n,{elements:s}));return o.emit({type:"fromJSON",json:e}),o}constructor(e,t){super(e,t=merge(HTMLComponent.defaultOptions,t)),this.options=t,this.type="HTML",this.elements=[],this.sync=new Component.Sync(this,this.syncHandlers)}async load(){this.emit({type:"load"}),await super.load();const e=this.options;let t=!1;if(e.elements&&(this.elements=e.elements.map(function(e){return"string"==typeof e?new AST(e).nodes[0]:(e.textContent||e.tagName||!e.attributes||(t=!0),e)})),this.constructTree(),this.emit({type:"afterLoad"}),t)throw new Error("Missing tagName param in component: "+e.cell);return this}render(){return super.render(),this.constructTree(),this.emit({type:"afterRender"}),this}resize(e,t){return super.resize(e,t),this}async update(e){await super.update(e),this.emit({type:"afterUpdate"})}constructTree(){for(;this.contentElement.firstChild;)this.contentElement.firstChild.remove();const e=new AST(this.elements);e.addToDOM(this.contentElement)}toJSON(){var e=(this.options.elements||[]).map(e=>JSON.stringify(e)),e=merge(super.toJSON(),{elements:e,options:this.options});return this.emit({type:"toJSON",json:e}),e}getOptions(){return{...diffObjects(this.options,HTMLComponent.defaultOptions),type:"HTML"}}onTableChanged(e){e.detail?.sender!==this.id&&this.render()}}HTMLComponent.defaultOptions=merge(Component.defaultOptions,{type:"HTML",elements:[]});export default HTMLComponent;
"use strict";import Component from"../Components/Component.js";import DataConverter from"../../Data/Converters/DataConverter.js";import DataTable from"../../Data/DataTable.js";import Globals from"../../Dashboards/Globals.js";import HighchartsSyncHandlers from"./HighchartsSyncHandlers.js";import U from"../../Core/Utilities.js";const{addEvent,createElement,error,diffObjects,isString,merge,splat,uniqueKey}=U;class HighchartsComponent extends Component{static fromJSON(t,e){var s=t.options,n=JSON.parse(t.options.chartOptions||"{}");const i=new HighchartsComponent(e,merge(s,{chartOptions:n,syncHandlers:HighchartsComponent.syncHandlers}));return i.emit({type:"fromJSON",json:t}),i}constructor(t,e){super(t,e=merge(HighchartsComponent.defaultOptions,e)),this.options=e,this.chartConstructor=this.options.chartConstructor,this.type="Highcharts",this.chartContainer=createElement("figure",void 0,void 0,this.contentElement,!0),this.setOptions(),this.sync=new HighchartsComponent.Sync(this,this.syncHandlers),this.chartOptions=merge(this.options.chartOptions||{chart:{}},{tooltip:{}}),this.connector&&this.connector.on("afterLoad",t=>{t.table&&this.connector&&this.connector.table.setColumns(t.table.getColumns())}),this.innerResizeTimeouts=[]}onTableChanged(){this.updateSeries()}async load(){return this.emit({type:"load"}),await super.load(),this.emit({type:"afterLoad"}),this}render(){var t=this;return super.render(),t.chart=t.getChart(),t.updateSeries(),this.sync.start(),t.emit({type:"afterRender"}),t.setupConnectorUpdate(),this}resize(t,e){for(super.resize(t,e);this.innerResizeTimeouts.length;){var s=this.innerResizeTimeouts.pop();s&&clearTimeout(s)}return this.innerResizeTimeouts.push(setTimeout(()=>{this.chart&&this.chart.setSize(null,this.contentElement.clientHeight,!1)},33)),this}setupConnectorUpdate(){const{connector:e,chart:t}=this;e&&t&&this.options.allowConnectorUpdate&&t.series.forEach(t=>{t.points.forEach(t=>{addEvent(t,"drag",()=>{this.onChartUpdate(t,e)})})})}setOptions(){this.options.chartClassName&&this.chartContainer.classList.add(this.options.chartClassName),this.options.chartID&&(this.chartContainer.id=this.options.chartID)}onChartUpdate(t,e){const s=e.table,n=t.series.name,i=t.index,r=new DataConverter,o=r.asNumber(t.y);s.setCell(n,i,o)}async update(t,e=!0){await super.update(t,!1),this.setOptions(),this.filterAndAssignSyncOptions(HighchartsSyncHandlers),this.chart&&this.chart.update(merge(this.options.chartOptions)||{}),this.emit({type:"afterUpdate"}),e&&this.render()}updateSeries(){if(this.chart&&this.connector){this.presentationTable=this.presentationModifier?this.connector.table.modified.clone():this.connector.table;const a=this.connector.table["id"],h=this["chart"],n=(this.presentationModifier&&(this.presentationTable=this.presentationModifier.modifyTable(this.presentationTable).modified),this.presentationTable),p=n.getModifier()?.options;var t=n.modified.getColumnNames();const e=this.options.columnAssignment||this.getDefaultColumnAssignment(t),i={},c=(this.emit({type:"afterPresentationModifier",table:n}),n.modified.getColumnNames().filter(t=>{return!(this.activeGroup&&!1===this.activeGroup.getSharedState().getColumnVisibility(t)||!e[t])&&("x"!==e[t]||(i[t]=t,!1))})),s=c.map((e,t)=>{let s=0;for(;s<h.series.length;){const o=h.series[s];var n=o.options.id===a+"-series-"+t,i=-1!==c.indexOf(o.name);if(s++,i&&n)return o;!i&&n&&o.destroy()}var r=!("Math"===p?.type&&p.columnFormulas?.some(t=>t.column===e));return h.addSeries({name:e,id:a+"-series-"+t,dragDrop:{draggableY:r}},!1)});s.forEach(t=>{var e=Object.keys(i)[0];const s=new DataTable({columns:n.modified.getColumns([e,t.name])});s.renameColumn(t.name,"y"),e&&s.renameColumn(e,"x");e=s.getRowObjects().reduce((t,e)=>(t.push([e.x,e.y]),t),[]);t.setData(e)})}}getChart(){return this.chart||this.createChart()}getDefaultColumnAssignment(s=[]){const n={};for(let t=0,e=s.length;t<e;++t){var i;n[s[t]]="y",0!==t||(i=this.presentationTable?.getColumn(s[t],!0))&&isString(i[0])&&(n[s[t]]="x")}return n}createChart(){const t=HighchartsComponent.charter||Globals.win.Highcharts;if("chart"!==this.chartConstructor){const e=t[this.chartConstructor];if(e)try{return e(this.chartContainer,this.chartOptions)}catch{error("The Highcharts component is misconfigured: `"+this.cell.id+"`")}}if("function"!=typeof t.chart)throw new Error("Chart constructor not found");return this.chart=t.chart(this.chartContainer,this.chartOptions),this.chart}registerChartEvents(){if(this.chart&&this.chart.options){const e=this.chart.options,t=["chart","series","yAxis","xAxis","colorAxis","annotations","navigation"].map(n=>{let t=e[n]||{};return(t=!Array.isArray(t)&&t.events?[t]:t)&&"object"==typeof t&&Array.isArray(t)&&t.reduce((t,e,s)=>(e&&e.events&&(t[e.id||n+"-"+s]=e.events),t),{})||{}});t.forEach(t=>{Object.keys(t).forEach(e=>{const s=t[e];Object.keys(s).forEach(t=>{this.callbackRegistry.addCallback(e+"-"+t,{type:"seriesEvent",func:s[t]})})})})}}setConnector(t){var e=this.chart;if(this.connector&&e&&e.series&&this.connector.table.id!==t?.table.id){var s=this.connector.table.id;for(let t=e.series.length-1;0<=t;t--){const n=e.series[t];-1!==n.options.id?.indexOf(s)&&n.remove(!1)}}return super.setConnector(t),this}toJSON(){var t=JSON.stringify(this.options.chartOptions),e=this.options.chartConstructor,s=(this.registerChartEvents(),super.toJSON()),s={...s,type:"Highcharts",options:{...s.options,chartOptions:t,chartConstructor:e,type:"Highcharts",sync:{}}};return this.emit({type:"toJSON",json:s}),s}getOptions(){return{...diffObjects(this.options,HighchartsComponent.defaultOptions),type:"Highcharts"}}getEditableOptions(){var t=this.options,e=this.chart,s=e&&e.options,n=s&&s.chart?.type||"line";return merge(t,{chartOptions:s},{chartOptions:{yAxis:splat(e&&e.yAxis[0].options),xAxis:splat(e&&e.xAxis[0].options),plotOptions:{series:(s&&s.plotOptions||{})[n]}}})}getEditableOptionValue(t){if(t)return 1===t.length&&"chartOptions"===t[0]?JSON.stringify(this.options.chartOptions,null,2):super.getEditableOptionValue.call(this,t)}}HighchartsComponent.syncHandlers=HighchartsSyncHandlers,HighchartsComponent.defaultOptions=merge(Component.defaultOptions,{allowConnectorUpdate:!0,className:[Component.defaultOptions.className,Component.defaultOptions.className+"-highcharts"].join(" "),chartClassName:"chart-container",chartID:"chart-"+uniqueKey(),chartOptions:{chart:{styledMode:!0,zooming:{mouseWheel:{enabled:!1}}},series:[]},chartConstructor:"",editableOptions:(Component.defaultOptions.editableOptions||[]).concat([{name:"chartOptions",type:"nested",nestedOptions:[{name:"chart",options:[{name:"title",propertyPath:["chartOptions","title","text"],type:"input"},{name:"subtitle",propertyPath:["chartOptions","subtitle","text"],type:"input"},{name:"type",propertyPath:["chartOptions","chart","type"],type:"select",selectOptions:[{name:"column",iconURL:"series-types/icon-column.svg"},{name:"line",iconURL:"series-types/icon-line.svg"},{name:"scatter",iconURL:"series-types/icon-scatter.svg"},{name:"pie",iconURL:"series-types/icon-pie.svg"}]}]},{name:"xAxis",options:[{name:"title",propertyPath:["chartOptions","xAxis","title","text"],type:"input"},{name:"type",propertyPath:["chartOptions","xAxis","type"],type:"select",selectOptions:[{name:"linear"},{name:"datetime"},{name:"logarithmic"}]}]},{name:"yAxis",options:[{name:"title",propertyPath:["chartOptions","yAxis","title","text"],type:"input"},{name:"type",propertyPath:["chartOptions","yAxis","type"],type:"select",selectOptions:[{name:"linear"},{name:"datetime"},{name:"logarithmic"}]}]},{name:"legend",showToggle:!0,propertyPath:["chartOptions","legend","enabled"],options:[{name:"align",propertyPath:["chartOptions","legend","align"],type:"select",selectOptions:[{name:"left"},{name:"center"},{name:"right"}]}]},{name:"tooltip",showToggle:!0,propertyPath:["chartOptions","tooltip","enabled"],options:[{name:"split",propertyPath:["chartOptions","tooltip","split"],type:"toggle"}]},{name:"dataLabels",propertyPath:["chartOptions","plotOptions","series","dataLabels","enabled"],showToggle:!0,options:[{name:"align",propertyPath:["chartOptions","plotOptions","series","dataLabels","align"],type:"select",selectOptions:[{name:"left"},{name:"center"},{name:"right"}]}]},{name:"credits",showToggle:!0,propertyPath:["chartOptions","credits","enabled"],options:[{name:"name",propertyPath:["chartOptions","credits","text"],type:"input"},{name:"url",propertyPath:["chartOptions","credits","href"],type:"input"}]}]},{name:"chartConfig",propertyPath:["chartOptions"],type:"textarea"},{name:"chartClassName",propertyPath:["chartClassName"],type:"input"},{name:"chartID",propertyPath:["chartID"],type:"input"}]),syncHandlers:HighchartsSyncHandlers,editableOptionsBindings:merge(Component.defaultOptions.editableOptionsBindings,{skipRedraw:["chartOptions","chartConfig"]}),columnAssignment:void 0});export default HighchartsComponent;
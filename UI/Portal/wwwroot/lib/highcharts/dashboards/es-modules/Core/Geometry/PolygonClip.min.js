"use strict";function clipLineString(n,i){const t=[],e=clipPolygon(n,i,!1);for(let n=1;n<e.length;n++)e[n].isIntersection&&e[n-1].isIntersection&&(t.push(e.splice(0,n)),n=0),n===e.length-1&&t.push(e);return t}function clipPolygon(n,i,t=!0){let e=i[i.length-1],o,s,l,r=n;for(let n=0;n<i.length;n++){var c=r;o=i[n],r=[],s=t?c[c.length-1]:c[0];for(let n=0;n<c.length;n++)l=c[n],isInside(e,o,l)?(isInside(e,o,s)||r.push(intersection(e,o,s,l)),r.push(l)):isInside(e,o,s)&&r.push(intersection(e,o,s,l)),s=l;e=o}return r}function isInside(n,i,t){return(i[0]-n[0])*(t[1]-n[1])>(i[1]-n[1])*(t[0]-n[0])}function intersection(n,i,t,e){const o=[n[0]-i[0],n[1]-i[1]],s=[t[0]-e[0],t[1]-e[1]],l=n[0]*i[1]-n[1]*i[0],r=t[0]*e[1]-t[1]*e[0],c=1/(o[0]*s[1]-o[1]*s[0]),p=[(l*s[0]-r*o[0])*c,(l*s[1]-r*o[1])*c];return p.isIntersection=!0,p}const PolygonClip={clipLineString:clipLineString,clipPolygon:clipPolygon};export default PolygonClip;
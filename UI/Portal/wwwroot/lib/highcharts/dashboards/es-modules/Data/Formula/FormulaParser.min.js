"use strict";const booleanRegExp=/^(?:FALSE|TRUE)/,decimal1RegExp=/^[+-]?\d+(?:\.\d+)?(?:e[+-]\d+)?/,decimal2RegExp=/^[+-]?\d+(?:,\d+)?(?:e[+-]\d+)?/,functionRegExp=/^([A-Z][A-Z\d\.]*)\(/,operatorRegExp=/^(?:[+\-*\/^<=>]|<=|=>)/,rangeA1RegExp=/^(\$?[A-Z]+)(\$?\d+)\:(\$?[A-Z]+)(\$?\d+)/,rangeR1C1RegExp=/^R(\d*|\[\d+\])C(\d*|\[\d+\])\:R(\d*|\[\d+\])C(\d*|\[\d+\])/,referenceA1RegExp=/^(\$?[A-Z]+)(\$?\d+)(?![\:C])/,referenceR1C1RegExp=/^R(\d*|\[\d+\])C(\d*|\[\d+\])(?!\:)/;function extractParantheses(s){let a=0;for(let e=0,r=s.length,t,n=1;e<r;++e)if("("===(t=s[e]))a||(n=e+1),++a;else if(")"===t&&!--a)return s.substring(n,e);if(0<a){const e=new Error("Incomplete parantheses.");throw e.name="FormulaParseError",e}return""}function extractString(s){let a=-1;for(let e=0,r=s.length,t,n=!1;e<r;++e)if("\\"===(t=s[e]))n=!n;else if(n)n=!1;else if('"'===t){if(!(a<0))return s.substring(a+1,e);a=e}const e=new Error("Incomplete string.");throw e.name="FormulaParseError",e}function parseArgument(e,r){let t;if(t=e.match(rangeR1C1RegExp)){var n=""===t[2]||"["===t[2][0],s=""===t[1]||"["===t[1][0],a=""===t[4]||"["===t[4][0],i=""===t[3]||"["===t[3][0];const o={type:"range",beginColumn:n?parseInt(t[2].substring(1,-1)||"0",10):parseInt(t[2],10)-1,beginRow:s?parseInt(t[1].substring(1,-1)||"0",10):parseInt(t[1],10)-1,endColumn:a?parseInt(t[4].substring(1,-1)||"0",10):parseInt(t[4],10)-1,endRow:i?parseInt(t[3].substring(1,-1)||"0",10):parseInt(t[3],10)-1};return n&&(o.beginColumnRelative=!0),s&&(o.beginRowRelative=!0),a&&(o.endColumnRelative=!0),i&&(o.endRowRelative=!0),o}if(t=e.match(rangeA1RegExp)){n="$"!==t[1][0],s="$"!==t[2][0],a="$"!==t[3][0],i="$"!==t[4][0];const u={type:"range",beginColumn:parseReferenceColumn(n?t[1]:t[1].substring(1))-1,beginRow:parseInt(s?t[2]:t[2].substring(1),10)-1,endColumn:parseReferenceColumn(a?t[3]:t[3].substring(1))-1,endRow:parseInt(i?t[4]:t[4].substring(1),10)-1};return n&&(u.beginColumnRelative=!0),s&&(u.beginRowRelative=!0),a&&(u.endColumnRelative=!0),i&&(u.endRowRelative=!0),u}n=parseFormula(e,r);return 1===n.length&&"string"!=typeof n[0]?n[0]:n}function parseArguments(n,s){const a=[],i=s?";":",";let o=0,u="";for(let e=0,r=n.length,t;e<r;++e){var g;(t=n[e])===i&&!o&&u?(a.push(parseArgument(u,s)),u=""):'"'!==t||o||u?" "!==t&&(u+=t,"("===t?++o:")"===t&&--o):(g=extractString(n.substring(e)),a.push(g),e+=g.length+1)}return!o&&u&&a.push(parseArgument(u,s)),a}function parseFormula(e,r){const t=r?decimal2RegExp:decimal1RegExp,n=[];let s,a=("="===e[0]?e.substring(1):e).trim();for(;a;)if(s=a.match(referenceR1C1RegExp)){var i=""===s[2]||"["===s[2][0],o=""===s[1]||"["===s[1][0];const g={type:"reference",column:i?parseInt(s[2].substring(1,-1)||"0",10):parseInt(s[2],10)-1,row:o?parseInt(s[1].substring(1,-1)||"0",10):parseInt(s[1],10)-1};i&&(g.columnRelative=!0),o&&(g.rowRelative=!0),n.push(g),a=a.substring(s[0].length).trim()}else if(s=a.match(referenceA1RegExp)){i="$"!==s[1][0],o="$"!==s[2][0];const l={type:"reference",column:parseReferenceColumn(i?s[1]:s[1].substring(1))-1,row:parseInt(o?s[2]:s[2].substring(1),10)-1};i&&(l.columnRelative=!0),o&&(l.rowRelative=!0),n.push(l),a=a.substring(s[0].length).trim()}else if(s=a.match(operatorRegExp))n.push(s[0]),a=a.substring(s[0].length).trim();else if(s=a.match(booleanRegExp))n.push("TRUE"===s[0]),a=a.substring(s[0].length).trim();else if(s=a.match(t))n.push(parseFloat(s[0])),a=a.substring(s[0].length).trim();else if('"'===a[0]){const p=extractString(a);n.push(p.substring(1,-1)),a=a.substring(p.length+2).trim()}else{if(!(s=a.match(functionRegExp))){if("("===a[0]){var u=extractParantheses(a);if(u){n.push(parseFormula(u,r)),a=a.substring(u.length+2).trim();continue}}const c=e.length-a.length,m=new Error("Unexpected character `"+e.substring(c,1+c)+"` at position "+(1+c)+". (`..."+e.substring(c-5,6+c)+"...`)");throw m.name="FormulaParseError",m}u=extractParantheses(a=a.substring(s[1].length).trim());n.push({type:"function",name:s[1],args:parseArguments(u,r)}),a=a.substring(u.length+2).trim()}return n}function parseReferenceColumn(s){let a=0;for(let e=0,r=s.length,t,n=s.length-1;e<r;++e)65<=(t=s.charCodeAt(e))&&t<=90&&(a+=(t-64)*Math.pow(26,n)),--n;return a}const FormulaParser={parseFormula:parseFormula};export default FormulaParser;
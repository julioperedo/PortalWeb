!function(o){"object"==typeof module&&module.exports?module.exports=o.default=o:"function"==typeof define&&define.amd?define("highcharts/indicators/macd",["highcharts","highcharts/modules/stock"],function(s){return o(s),o.Highcharts=s,o}):o("undefined"!=typeof Highcharts?Highcharts:void 0)}(function(s){"use strict";s=s?s._modules:{};function o(s,o,t,e){s.hasOwnProperty(o)||(s[o]=e.apply(null,t),"function"==typeof CustomEvent&&window.dispatchEvent(new CustomEvent("HighchartsModuleLoaded",{detail:{path:o,module:s[o]}})))}o(s,"Stock/Indicators/MACD/MACDIndicator.js",[s["Core/Globals.js"],s["Core/Series/SeriesRegistry.js"],s["Core/Utilities.js"]],function(s,d,o){var t=s["noop"],e=d.seriesTypes["sma"];const{extend:i,correctFloat:c,defined:g,merge:l}=o;class n extends e{constructor(){super(...arguments),this.data=void 0,this.macdZones=void 0,this.options=void 0,this.points=void 0,this.signalZones=void 0}init(){d.seriesTypes.sma.prototype.init.apply(this,arguments);var s=this.color;this.options&&(g(this.colorIndex)&&(this.options.signalLine&&this.options.signalLine.styles&&!this.options.signalLine.styles.lineColor&&(this.options.colorIndex=this.colorIndex+1,this.getCyclic("color",void 0,this.chart.options.colors),this.options.signalLine.styles.lineColor=this.color),this.options.macdLine&&this.options.macdLine.styles&&!this.options.macdLine.styles.lineColor&&(this.options.colorIndex=this.colorIndex+1,this.getCyclic("color",void 0,this.chart.options.colors),this.options.macdLine.styles.lineColor=this.color)),this.macdZones={zones:this.options.macdLine.zones,startIndex:0},this.signalZones={zones:this.macdZones.zones.concat(this.options.signalLine.zones),startIndex:this.macdZones.zones.length},this.resetZones=!0),this.color=s}toYData(s){return[s.y,s.signal,s.MACD]}translate(){const e=this,i=["plotSignal","plotMACD"];s.seriesTypes.column.prototype.translate.apply(e),e.points.forEach(function(t){[t.signal,t.MACD].forEach(function(s,o){null!==s&&(t[i[o]]=e.yAxis.toPixels(s,!0))})})}destroy(){this.graph=null,this.graphmacd=this.graphmacd&&this.graphmacd.destroy(),this.graphsignal=this.graphsignal&&this.graphsignal.destroy(),d.seriesTypes.sma.prototype.destroy.apply(this,arguments)}drawGraph(){const t=this,s=t.points,e=t.options,o=t.zones,i={options:{gapSize:e.gapSize}},n=[[],[]];let r,a=s.length;for(;a--;)r=s[a],g(r.plotMACD)&&n[0].push({plotX:r.plotX,plotY:r.plotMACD,isNull:!g(r.plotMACD)}),g(r.plotSignal)&&n[1].push({plotX:r.plotX,plotY:r.plotSignal,isNull:!g(r.plotMACD)});["macd","signal"].forEach(function(s,o){t.points=n[o],t.options=l(e[s+"Line"].styles,i),t.graph=t["graph"+s],t.currentLineZone=s+"Zones",t.zones=t[t.currentLineZone].zones,d.seriesTypes.sma.prototype.drawGraph.call(t),t["graph"+s]=t.graph}),t.points=s,t.options=e,t.zones=o,t.currentLineZone=void 0}getZonesGraphs(s){const o=super.getZonesGraphs(s);let t=o;return this.currentLineZone&&((t=o.splice(this[this.currentLineZone].startIndex+1)).length?t.splice(0,0,s[0]):t=[s[0]]),t}applyZones(){var s=this.zones;this.zones=this.signalZones.zones,d.seriesTypes.sma.prototype.applyZones.call(this),this.graphmacd&&this.options.macdLine.zones.length&&this.graphmacd.hide(),this.zones=s}getValues(s,o){const t=o.longPeriod-o.shortPeriod,e=[],i=[],n=[];let r,a,l,p=0,h;if(!(s.xData.length<o.longPeriod+o.signalPeriod)){for(r=d.seriesTypes.ema.prototype.getValues(s,{period:o.shortPeriod,index:o.index}),a=d.seriesTypes.ema.prototype.getValues(s,{period:o.longPeriod,index:o.index}),r=r.values,a=a.values,l=0;l<=r.length;l++)g(a[l])&&g(a[l][1])&&g(r[l+t])&&g(r[l+t][0])&&e.push([r[l+t][0],0,null,r[l+t][1]-a[l][1]]);for(l=0;l<e.length;l++)i.push(e[l][0]),n.push([0,null,e[l][3]]);for(h=d.seriesTypes.ema.prototype.getValues({xData:i,yData:n},{period:o.signalPeriod,index:2}).values,l=0;l<e.length;l++)e[l][0]>=h[0][0]&&(e[l][2]=h[p][1],n[l]=[0,h[p][1],e[l][3]],null===e[l][3]?(e[l][1]=0,n[l][0]=0):(e[l][1]=c(e[l][3]-h[p][1]),n[l][0]=c(e[l][3]-h[p][1])),p++);return{values:e,xData:i,yData:n}}}}return n.defaultOptions=l(e.defaultOptions,{params:{shortPeriod:12,longPeriod:26,signalPeriod:9,period:26},signalLine:{zones:[],styles:{lineWidth:1,lineColor:void 0}},macdLine:{zones:[],styles:{lineWidth:1,lineColor:void 0}},threshold:0,groupPadding:.1,pointPadding:.1,crisp:!1,states:{hover:{halo:{size:0}}},tooltip:{pointFormat:'<span style="color:{point.color}">‚óè</span> <b> {series.name}</b><br/>Value: {point.MACD}<br/>Signal: {point.signal}<br/>Histogram: {point.y}<br/>'},dataGrouping:{approximation:"averages"},minPointLength:0}),i(n.prototype,{nameComponents:["longPeriod","shortPeriod","signalPeriod"],pointArrayMap:["y","signal","MACD"],parallelArrays:["x","y","signal","MACD"],pointValKey:"y",markerAttribs:t,getColumnMetrics:s.seriesTypes.column.prototype.getColumnMetrics,crispCol:s.seriesTypes.column.prototype.crispCol,drawPoints:s.seriesTypes.column.prototype.drawPoints}),d.registerSeriesType("macd",n),n}),o(s,"masters/indicators/macd.src.js",[],function(){})});
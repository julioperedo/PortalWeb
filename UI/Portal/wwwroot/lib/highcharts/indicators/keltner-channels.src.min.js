!function(t){"object"==typeof module&&module.exports?module.exports=t.default=t:"function"==typeof define&&define.amd?define("highcharts/indicators/keltner-channels",["highcharts","highcharts/modules/stock"],function(e){return t(e),t.Highcharts=e,t}):t("undefined"!=typeof Highcharts?Highcharts:void 0)}(function(e){"use strict";e=e?e._modules:{};function t(e,t,o,i){e.hasOwnProperty(t)||(e[t]=i.apply(null,o),"function"==typeof CustomEvent&&window.dispatchEvent(new CustomEvent("HighchartsModuleLoaded",{detail:{path:t,module:e[t]}})))}t(e,"Stock/Indicators/MultipleLinesComposition.js",[e["Core/Series/SeriesRegistry.js"],e["Core/Utilities.js"]],function(e,o){const f=e.seriesTypes["sma"]["prototype"],{defined:y,error:g,merge:C}=o;var t;{e=t=t||{};const a=[],p=["bottomLine"],l=["top","bottom"],h=["top"];function A(e){return"plot"+e.charAt(0).toUpperCase()+e.slice(1)}function v(e,t){const o=[];return(e.pointArrayMap||[]).forEach(e=>{e!==t&&o.push(A(e))}),o}function i(){const o=this,e=o.pointValKey,t=o.linesApiNames,i=o.areaLinesNames,s=o.points,n=o.options,r=o.graph,a={options:{gapSize:n.gapSize}},p=[],l=v(o,e);let h=s.length,c;var d,u,m;l.forEach((e,t)=>{for(p[t]=[];h--;)c=s[h],p[t].push({x:c.x,plotX:c.plotX,plotY:c[e],isNull:!y(c[e])});h=s.length}),o.userOptions.fillColor&&i.length&&(d=l.indexOf(A(i[0])),d=p[d],u=1===i.length?s:p[l.indexOf(A(i[1]))],m=o.color,o.points=u,o.nextPoints=d,o.color=o.userOptions.fillColor,o.options=C(s,a),o.graph=o.area,o.fillGraph=!0,f.drawGraph.call(o),o.area=o.graph,delete o.nextPoints,delete o.fillGraph,o.color=m),t.forEach((e,t)=>{p[t]?(o.points=p[t],n[e]?o.options=C(n[e].styles,a):g('Error: "There is no '+e+' in DOCS options declared. Check if linesApiNames are consistent with your DOCS line names."'),o.graph=o["graph"+e],f.drawGraph.call(o),o["graph"+e]=o.graph):g('Error: "'+e+" doesn't have equivalent in pointArrayMap. To many elements in linesApiNames relative to pointArrayMap.\"")}),o.points=s,o.options=n,o.graph=r,f.drawGraph.call(o)}function s(e){let t,o=[],i;if(e=e||this.points,this.fillGraph&&this.nextPoints){if((t=f.getGraphPath.call(this,this.nextPoints))&&t.length){t[0][0]="L",o=f.getGraphPath.call(this,e);for(let e=(i=t.slice(0,o.length)).length-1;0<=e;e--)o.push(i[e])}}else o=f.getGraphPath.apply(this,arguments);return o}function n(t){const o=[];return(this.pointArrayMap||[]).forEach(e=>{o.push(t[e])}),o}function r(){const e=this.pointArrayMap;let i,s;i=v(this),f.translate.apply(this,arguments),this.points.forEach(o=>{e.forEach((e,t)=>{s=o[e],null!==(s=this.dataModify?this.dataModify.modifyValue(s):s)&&(o[i[t]]=this.yAxis.toPixels(s,!0))})})}e.compose=function(e){if(o.pushUnique(a,e)){const t=e.prototype;t.linesApiNames=t.linesApiNames||p.slice(),t.pointArrayMap=t.pointArrayMap||l.slice(),t.pointValKey=t.pointValKey||"top",t.areaLinesNames=t.areaLinesNames||h.slice(),t.drawGraph=i,t.getGraphPath=s,t.toYData=n,t.translate=r}return e}}return t}),t(e,"Stock/Indicators/KeltnerChannels/KeltnerChannelsIndicator.js",[e["Stock/Indicators/MultipleLinesComposition.js"],e["Core/Series/SeriesRegistry.js"],e["Core/Utilities.js"]],function(e,v,t){var o=v.seriesTypes["sma"];const{correctFloat:x,extend:i,merge:s}=t;class n extends o{constructor(){super(...arguments),this.data=void 0,this.options=void 0,this.points=void 0}init(){v.seriesTypes.sma.prototype.init.apply(this,arguments),this.options=s({topLine:{styles:{lineColor:this.color}},bottomLine:{styles:{lineColor:this.color}}},this.options)}getValues(e,t){const o=t.period,i=t.periodATR,s=t.multiplierATR,n=t.index,r=e.yData,a=r?r.length:0,p=[],l=v.seriesTypes.ema.prototype.getValues(e,{period:o,index:n}),h=v.seriesTypes.atr.prototype.getValues(e,{period:i}),c=[],d=[];let u,m,f,y,g,C,A;if(!(a<o)){for(A=o;A<=a;A++)g=l.values[A-o],C=h.values[A-i],y=g[0],m=x(g[1]+s*C[1]),f=x(g[1]-s*C[1]),u=g[1],p.push([y,m,u,f]),c.push(y),d.push([m,u,f]);return{values:p,xData:c,yData:d}}}}return n.defaultOptions=s(o.defaultOptions,{params:{index:0,period:20,periodATR:10,multiplierATR:2},bottomLine:{styles:{lineWidth:1,lineColor:void 0}},topLine:{styles:{lineWidth:1,lineColor:void 0}},tooltip:{pointFormat:'<span style="color:{point.color}">‚óè</span><b> {series.name}</b><br/>Upper Channel: {point.top}<br/>EMA({series.options.params.period}): {point.middle}<br/>Lower Channel: {point.bottom}<br/>'},marker:{enabled:!1},dataGrouping:{approximation:"averages"},lineWidth:1}),i(n.prototype,{nameBase:"Keltner Channels",areaLinesNames:["top","bottom"],nameComponents:["period","periodATR","multiplierATR"],linesApiNames:["topLine","bottomLine"],pointArrayMap:["top","middle","bottom"],pointValKey:"middle"}),e.compose(n),v.registerSeriesType("keltnerchannels",n),n}),t(e,"masters/indicators/keltner-channels.src.js",[],function(){})});